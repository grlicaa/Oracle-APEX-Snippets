  CREATE TABLE "CAR_REGISTRATION" 
   (	"CAR_REGISTRATION_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VEHICLE_REGISTRATION_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"VEHICLE_MAKE" NUMBER NOT NULL ENABLE, 
	"VEHICLE_MODEL" NUMBER NOT NULL ENABLE, 
	"FUEL_TYPE" NUMBER NOT NULL ENABLE, 
	"CHASSIS_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"COLOR" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"YEAR_MANUFACTURED" NUMBER NOT NULL ENABLE, 
	"YEAR_REGISTERED" NUMBER NOT NULL ENABLE, 
	"CAR_OWNER" NUMBER NOT NULL ENABLE, 
	"CAR_PHOTO" BLOB, 
	"RENTAL_STATUS" NUMBER NOT NULL ENABLE, 
	"CAR_FILENAME" VARCHAR2(255), 
	"CAR_MIMETYPE" VARCHAR2(255), 
	"DATE_CREATED" DATE, 
	"VEHICLE_TYPE" NUMBER NOT NULL ENABLE, 
	"CAR_DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	 CONSTRAINT "CAR_REGISTRATION_CON" UNIQUE ("VEHICLE_REGISTRATION_NUMBER")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CAR_REGISTRATION_PK" PRIMARY KEY ("CAR_REGISTRATION_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CAR_REGISTRATION_CON1" UNIQUE ("CHASSIS_NUMBER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CAR_SUPPLIER" 
   (	"CAR_SUPPLIER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"LAST_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"DATE_OF_BIRTH" DATE NOT NULL ENABLE, 
	"RESIDENTIAL_ADDRESS" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"IDENTIFICATION_TYPE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"IDENTIFICATION_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"SUPPLIER_PHOTO" BLOB, 
	"PHONE_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"EMAIL_ADDRESS" VARCHAR2(255 CHAR), 
	"SUPPLIER_FILENAME" VARCHAR2(255), 
	"SUPPLIER_MIMETYPE" VARCHAR2(255), 
	"DATE_CREATED" DATE, 
	"GPS_ADDRESS" VARCHAR2(255), 
	"SUPPLIER_DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	 CONSTRAINT "CAR_SUPPLIER_PK" PRIMARY KEY ("CAR_SUPPLIER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CAR_SUPPLIER_CON" UNIQUE ("PHONE_NUMBER", "EMAIL_ADDRESS", "IDENTIFICATION_NUMBER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CUSTOMER" 
   (	"CUSTOMER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"LAST_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"DATE_OF_BIRTH" DATE NOT NULL ENABLE, 
	"OCCUPATION" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"IDENTIFICATION_TYPE" NUMBER NOT NULL ENABLE, 
	"IDENTIFICATION_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"IDENTIFICATION_IMAGE" BLOB, 
	"EMAIL_ADDRESS" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"PHONE_NUMBER" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"CUSTOMER_FILENAME" VARCHAR2(255), 
	"CUSTOMER_MIMETYPE" VARCHAR2(255), 
	"DATE_CREATED" DATE, 
	"RESIDENTIAL_ADDRESS" VARCHAR2(255) NOT NULL ENABLE, 
	"DIGITAL_ADDRESS" VARCHAR2(255), 
	"CUSTOMER_DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	 CONSTRAINT "CUSTOMER_PK" PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CUSTOMER_CON" UNIQUE ("EMAIL_ADDRESS", "PHONE_NUMBER", "IDENTIFICATION_NUMBER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "BALANCE_PAYMENTS" 
   (	"BALANCE_PAYMENTS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"CAR_BOOKINGS_ID" NUMBER NOT NULL ENABLE, 
	"AMOUNT_PAID" NUMBER NOT NULL ENABLE, 
	"PAID_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255), 
	"DATE_CREATED" DATE, 
	 CONSTRAINT "BALANCE_PAYMENTS_PK" PRIMARY KEY ("BALANCE_PAYMENTS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "BOOKING_STATUS" 
   (	"BOOKING_STATUS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"BOOKING_STATUS_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "BOOKING_STATUS_PK" PRIMARY KEY ("BOOKING_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CAR_BOOKINGS" 
   (	"CAR_BOOKINGS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"CAR_REGISTRATION_ID" NUMBER NOT NULL ENABLE, 
	"BOOKING_START_DATE" DATE NOT NULL ENABLE, 
	"BOOKING_END_DATE" DATE NOT NULL ENABLE, 
	"BOOKING_START_TIME" VARCHAR2(8), 
	"BOOKING_END_TIME" VARCHAR2(8), 
	"BOOKING_DAYS" NUMBER NOT NULL ENABLE, 
	"DAILY_RATE_WITHIN_ACCRA" NUMBER NOT NULL ENABLE, 
	"AMOUNT_DEPOSITED" NUMBER NOT NULL ENABLE, 
	"SECURITY_DEPOSIT" NUMBER NOT NULL ENABLE, 
	"FUEL_LEVEL" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"TOTAL_AMOUNT" NUMBER NOT NULL ENABLE, 
	"BALANCE_REMAINING" NUMBER NOT NULL ENABLE, 
	"BOOKING_STATUS" NUMBER NOT NULL ENABLE, 
	"DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	"DAILY_RATE_OUTSIDE_ACCRA" NUMBER, 
	"BOOKING_DAYS_OUTSIDE_ACCRA" NUMBER DEFAULT 0, 
	"PENALTY_AMOUNT" NUMBER DEFAULT 0, 
	 CONSTRAINT "CAR_BOOKINGS_PK" PRIMARY KEY ("CAR_BOOKINGS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DOCUMENT_STATUS" 
   (	"DOCUMENT_STATUS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DOCUMENT_STATUS_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "DOCUMENT_STATUS_PK" PRIMARY KEY ("DOCUMENT_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DOCUMENT_TYPE" 
   (	"DOCUMENT_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DOCUMENT_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "DOCUMENT_TYPE_PK" PRIMARY KEY ("DOCUMENT_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "FUEL_TYPE" 
   (	"FUEL_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FUEL" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "FUEL_TYPE_PK" PRIMARY KEY ("FUEL_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(128), 
	"OBJECT_NAME" VARCHAR2(128), 
	"OBJECT_ALIAS" VARCHAR2(261), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(128), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(128)
   ) ;

  CREATE TABLE "IDENTIFICATION_TYPE" 
   (	"IDENTIFICATION_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TYPE_OF_IDENTIFICATION" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ID_SHORT_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "IDENTIFICATION_TYPE_PK" PRIMARY KEY ("IDENTIFICATION_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "RENTAL_STATUS" 
   (	"RENTAL_STATUS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"RENTAL_STATE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "RENTAL_STATUS_PK" PRIMARY KEY ("RENTAL_STATUS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "TB_USERS" 
   (	"USER_ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USER_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(255) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(255) NOT NULL ENABLE, 
	"ISADMIN" VARCHAR2(1) DEFAULT 0, 
	"STATUS" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"LAST_NAME" VARCHAR2(255) NOT NULL ENABLE, 
	"DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	 PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "USERS_U1" UNIQUE ("USER_NAME")
  USING INDEX  ENABLE, 
	 CONSTRAINT "TB_USERS_CON" UNIQUE ("EMAIL")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "USER_MANAGEMENT" 
   (	"USER_MANAGEMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USER_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"VEHICLE_SETUP" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"DOCUMENTATION_ID_SETUP" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"ACCESS_LOG" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"USERS" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"EDIT_USER" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"USER_MANAGEMENT" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CUSTOMER_REGISTRATION" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_REGISTRATION" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_SUPPLIER_REGISTRATION" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_DOCUMENT_REGISTRATION" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_BOOKING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"PAY_BALANCE" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"EXTEND_CAR_BOOKING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"ACTIVE_CAR_BOOKING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_BOOKING_ALMOST_DUE" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_BOOKING_DUE" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"EXPIRED_CAR_BOOKING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"DOCUMENTS_DUE_RENEWAL" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"COMPLETED_CAR_BOOKING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CUSTOMER_LIST" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"VEHICLE_FLEET" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_SUPPLIERS_LIST" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"ACTIVE_DOCUMENT" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"ISADMIN" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"REPORT" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"PENDING" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"OPERATION" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"SETUP" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"CAR_BOOKING_EXTENSIONS" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	"BOOKING_PENALTY" VARCHAR2(1) DEFAULT 'N' NOT NULL ENABLE, 
	 CONSTRAINT "USER_MANAGEMENT_PK" PRIMARY KEY ("USER_MANAGEMENT_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VEHICLE_ASSIGNMENTS" 
   (	"VEHICLE_ASSIGNMENTS_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"OLD_CAR_REGISTRATION_ID" NUMBER NOT NULL ENABLE, 
	"NEW_CAR_REGISTRATION_ID" NUMBER NOT NULL ENABLE, 
	"CAR_BOOKING_ID" NUMBER NOT NULL ENABLE, 
	"REASSIGNMENT_REASON" VARCHAR2(255 CHAR), 
	 CONSTRAINT "VEHICLE_ASSIGNMENTS_PK" PRIMARY KEY ("VEHICLE_ASSIGNMENTS_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VEHICLE_DOCUMENT" 
   (	"VEHICLE_DOCUMENT_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CAR_REGISTRATION_ID" NUMBER NOT NULL ENABLE, 
	"ISSUE_DATE" DATE NOT NULL ENABLE, 
	"RENEWABLE_DATE" DATE NOT NULL ENABLE, 
	"DOCUMENT_FEE" NUMBER NOT NULL ENABLE, 
	"CONTACT_PERSON" VARCHAR2(255 CHAR), 
	"PHONE_NUMBER" VARCHAR2(255 CHAR), 
	"DOCUMENT_TYPE" NUMBER NOT NULL ENABLE, 
	"DOCUMENT_STATUS" NUMBER NOT NULL ENABLE, 
	"DATE_CREATED" DATE, 
	"CREATED_BY" VARCHAR2(255), 
	 CONSTRAINT "VEHICLE_DOCUMENT_PK" PRIMARY KEY ("VEHICLE_DOCUMENT_ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "VEHICLE_DOCUMENT_CON" UNIQUE ("PHONE_NUMBER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VEHICLE_MAKE" 
   (	"VEHICLE_MAKE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VEHICLE_MAKE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"SHORT_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "VEHICLE_MAKE_PK" PRIMARY KEY ("VEHICLE_MAKE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VEHICLE_MODEL" 
   (	"VEHICLE_MODEL_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VEHICLE_MODEL" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"VEHICLE_MAKE" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "VEHICLE_MODEL_PK" PRIMARY KEY ("VEHICLE_MODEL_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "VEHICLE_TYPE" 
   (	"VEHICLE_TYPE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"VEHICLE_TYPE" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"VEHICLE_SHORT_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "VEHICLE_TYPE_PK" PRIMARY KEY ("VEHICLE_TYPE_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "BALANCE_PAYMENTS" ADD CONSTRAINT "BALANCE_PAYMENTS_FK2" FOREIGN KEY ("CAR_BOOKINGS_ID")
	  REFERENCES "CAR_BOOKINGS" ("CAR_BOOKINGS_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "BALANCE_PAYMENTS" ADD CONSTRAINT "BALANCE_PAYMENTS_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "CUSTOMER" ("CUSTOMER_ID") ON DELETE CASCADE ENABLE;

  ALTER TABLE "CAR_BOOKINGS" ADD CONSTRAINT "CAR_BOOKINGS_FK" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "CUSTOMER" ("CUSTOMER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CAR_BOOKINGS" ADD CONSTRAINT "CAR_BOOKINGS_FK2" FOREIGN KEY ("CAR_REGISTRATION_ID")
	  REFERENCES "CAR_REGISTRATION" ("CAR_REGISTRATION_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CAR_BOOKINGS" ADD CONSTRAINT "CAR_BOOKINGS_FK3" FOREIGN KEY ("BOOKING_STATUS")
	  REFERENCES "BOOKING_STATUS" ("BOOKING_STATUS_ID") ON DELETE CASCADE ENABLE;

  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK" FOREIGN KEY ("CAR_OWNER")
	  REFERENCES "CAR_SUPPLIER" ("CAR_SUPPLIER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK2" FOREIGN KEY ("VEHICLE_MODEL")
	  REFERENCES "VEHICLE_MODEL" ("VEHICLE_MODEL_ID") ENABLE;
  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK3" FOREIGN KEY ("FUEL_TYPE")
	  REFERENCES "FUEL_TYPE" ("FUEL_TYPE_ID") ENABLE;
  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK1" FOREIGN KEY ("VEHICLE_MAKE")
	  REFERENCES "VEHICLE_MAKE" ("VEHICLE_MAKE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK4" FOREIGN KEY ("VEHICLE_TYPE")
	  REFERENCES "VEHICLE_TYPE" ("VEHICLE_TYPE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "CAR_REGISTRATION" ADD CONSTRAINT "CAR_REGISTRATION_FK5" FOREIGN KEY ("RENTAL_STATUS")
	  REFERENCES "RENTAL_STATUS" ("RENTAL_STATUS_ID") ON DELETE CASCADE ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CAR_SUPPLIER_T" 
before
insert or update or delete on "CAR_SUPPLIER"
for each row
begin
    :new.email_address := lower(:new.email_address);
end;
/
ALTER TRIGGER "CAR_SUPPLIER_T" ENABLE;

  ALTER TABLE "CUSTOMER" ADD CONSTRAINT "CUSTOMER_FK" FOREIGN KEY ("IDENTIFICATION_TYPE")
	  REFERENCES "IDENTIFICATION_TYPE" ("IDENTIFICATION_TYPE_ID") ON DELETE CASCADE ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CUSTOMER_T" 
    before insert or update 
    on CUSTOMER
    for each row
begin
    :new.email_address := lower(:new.email_address);
end CUSTOMER_T;
/
ALTER TRIGGER "CUSTOMER_T" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_BI_USERS" 
  BEFORE INSERT ON TB_USERS
  for each row 
BEGIN 
  :new.user_name := upper(:new.user_name); 
  :new.email := lower(:new.email); 
  :new.password := ENCRYPT_PASSWORD(upper(:new.user_name), :new.password); 
END;
/
ALTER TRIGGER "T_BI_USERS" ENABLE;

  ALTER TABLE "USER_MANAGEMENT" ADD CONSTRAINT "USER_MANAGEMENT_FK" FOREIGN KEY ("USER_NAME")
	  REFERENCES "TB_USERS" ("USER_NAME") ON DELETE CASCADE ENABLE;

  ALTER TABLE "VEHICLE_DOCUMENT" ADD CONSTRAINT "VEHICLE_DOCUMENT_FK" FOREIGN KEY ("CAR_REGISTRATION_ID")
	  REFERENCES "CAR_REGISTRATION" ("CAR_REGISTRATION_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "VEHICLE_DOCUMENT" ADD CONSTRAINT "VEHICLE_DOCUMENT_FK1" FOREIGN KEY ("DOCUMENT_TYPE")
	  REFERENCES "DOCUMENT_TYPE" ("DOCUMENT_TYPE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "VEHICLE_DOCUMENT" ADD CONSTRAINT "VEHICLE_DOCUMENT_FK2" FOREIGN KEY ("DOCUMENT_STATUS")
	  REFERENCES "DOCUMENT_STATUS" ("DOCUMENT_STATUS_ID") ON DELETE CASCADE ENABLE;

  ALTER TABLE "VEHICLE_MODEL" ADD CONSTRAINT "VEHICLE_MODEL_FK" FOREIGN KEY ("VEHICLE_MAKE")
	  REFERENCES "VEHICLE_MAKE" ("VEHICLE_MAKE_ID") ON DELETE CASCADE ENABLE;
create or replace FUNCTION AUTH 
  (p_username in varchar2,  
   p_password in varchar2) 
return boolean 
IS 

  l_e_password              varchar2(255); 
  l_user_exist              number; 
  l_user_name               varchar2(255) := upper(p_username);
  l_password                varchar2(255);

BEGIN 

    --check if the user exist in the user's table
    select count(*)  
      into l_user_exist  
      from tb_users 
      where user_name = l_user_name; 

     --if the user exist
     if l_user_exist > 0 then 

          -- encrypt the password which has been recieved
          l_e_password := encrypt_password(l_user_name, p_password); 

          -- retrive the user's password
          select password  
            into l_password  
            from tb_users  
           where user_name = l_user_name; 

          --compare the user's password with the encrypted password

          --if the passwords match return true, otherwise return false
          if l_e_password = l_password then 
              return true; 
          else 
              return false; 
          end if; 

     --if the user does not exist in the user's table return false
     else 
          return false; 
     end if; 

     exception when others then
        return false;
end AUTH;
/
create or replace FUNCTION ENCRYPT_PASSWORD
  (p_username in varchar2,
   p_password  in varchar2)
return varchar2
is
  l_password varchar2(255);
  l_salt  varchar2(30) := 'RANDOM_SALT_STRING';
begin

    l_password := 
     DBMS_OBFUSCATION_TOOLKIT.MD5(
        input_string => UPPER(p_username) || l_salt || UPPER(p_password));

    return l_password;
end ENCRYPT_PASSWORD;
/
create or replace FUNCTION GET_STATUS_DESCRIPTION(p_status NUMBER)
RETURN VARCHAR2
IS
  v_description VARCHAR2(20);
BEGIN
  CASE p_status
    WHEN 1 THEN v_description := 'Active';
    WHEN 0 THEN v_description := 'Inactive';
    ELSE v_description := 'Unknown';
  END CASE;

  RETURN v_description;
END GET_STATUS_DESCRIPTION;
/






















































































  CREATE UNIQUE INDEX "BALANCE_PAYMENTS_PK" ON "BALANCE_PAYMENTS" ("BALANCE_PAYMENTS_ID") 
  ;

  CREATE UNIQUE INDEX "BOOKING_STATUS_PK" ON "BOOKING_STATUS" ("BOOKING_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "CAR_BOOKINGS_PK" ON "CAR_BOOKINGS" ("CAR_BOOKINGS_ID") 
  ;

  CREATE UNIQUE INDEX "CAR_REGISTRATION_CON" ON "CAR_REGISTRATION" ("VEHICLE_REGISTRATION_NUMBER") 
  ;

  CREATE UNIQUE INDEX "CAR_REGISTRATION_CON1" ON "CAR_REGISTRATION" ("CHASSIS_NUMBER") 
  ;

  CREATE UNIQUE INDEX "CAR_REGISTRATION_PK" ON "CAR_REGISTRATION" ("CAR_REGISTRATION_ID") 
  ;

  CREATE UNIQUE INDEX "CAR_SUPPLIER_CON" ON "CAR_SUPPLIER" ("PHONE_NUMBER", "EMAIL_ADDRESS", "IDENTIFICATION_NUMBER") 
  ;

  CREATE UNIQUE INDEX "CAR_SUPPLIER_PK" ON "CAR_SUPPLIER" ("CAR_SUPPLIER_ID") 
  ;

  CREATE UNIQUE INDEX "CUSTOMER_CON" ON "CUSTOMER" ("EMAIL_ADDRESS", "PHONE_NUMBER", "IDENTIFICATION_NUMBER") 
  ;

  CREATE UNIQUE INDEX "CUSTOMER_PK" ON "CUSTOMER" ("CUSTOMER_ID") 
  ;

  CREATE UNIQUE INDEX "DOCUMENT_STATUS_PK" ON "DOCUMENT_STATUS" ("DOCUMENT_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "DOCUMENT_TYPE_PK" ON "DOCUMENT_TYPE" ("DOCUMENT_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "FUEL_TYPE_PK" ON "FUEL_TYPE" ("FUEL_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "IDENTIFICATION_TYPE_PK" ON "IDENTIFICATION_TYPE" ("IDENTIFICATION_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "RENTAL_STATUS_PK" ON "RENTAL_STATUS" ("RENTAL_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C0052153" ON "TB_USERS" ("USER_ID") 
  ;

  CREATE UNIQUE INDEX "TB_USERS_CON" ON "TB_USERS" ("EMAIL") 
  ;

  CREATE UNIQUE INDEX "USERS_U1" ON "TB_USERS" ("USER_NAME") 
  ;

  CREATE UNIQUE INDEX "USER_MANAGEMENT_PK" ON "USER_MANAGEMENT" ("USER_MANAGEMENT_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_ASSIGNMENTS_PK" ON "VEHICLE_ASSIGNMENTS" ("VEHICLE_ASSIGNMENTS_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_DOCUMENT_CON" ON "VEHICLE_DOCUMENT" ("PHONE_NUMBER") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_DOCUMENT_PK" ON "VEHICLE_DOCUMENT" ("VEHICLE_DOCUMENT_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_MAKE_PK" ON "VEHICLE_MAKE" ("VEHICLE_MAKE_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_MODEL_PK" ON "VEHICLE_MODEL" ("VEHICLE_MODEL_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_TYPE_PK" ON "VEHICLE_TYPE" ("VEHICLE_TYPE_ID") 
  ;




























create or replace package aop_api23_pkg
AUTHID CURRENT_USER
as
/* Copyright 2015-2023 - APEX RnD - United Codes
*/
--## CONSTANTS
 
--### AOP Version
-- The version of APEX Office Print (AOP)
c_aop_version               constant varchar2(6)  := '23.1.0';                               
--### AOP URLs
-- The default url for the AOP Server
c_aop_url                   constant varchar2(50) := 'http://api.apexofficeprint.com/';      
-- The default url for the AOP Fallback Server in case the c_aop_url would fail
c_aop_url_fallback          constant varchar2(50) := 'http://www.cloudofficeprint.com/aop/'; 
-- The default secure url for the AOP Server
c_aop_url_secure            constant varchar2(50) := 'https://api.apexofficeprint.com/';     
-- The default secure url for the AOP Fallback Server
c_aop_url_secure_fallback   constant varchar2(50) := 'https://www.cloudofficeprint.com/aop/';
-- The url for the AOP Server in the Oracle Cloud US (Ashburn)
c_aop_url_oci_us            constant varchar2(50) := 'https://api-us.apexofficeprint.com/';  
-- The url for the AOP Server in the Oracle Cloud EU (Frankfurt)
c_aop_url_oci_eu            constant varchar2(50) := 'https://api-eu.apexofficeprint.com/';  
-- The url for the AOP Server in the Oracle Cloud APAC (Hyperdad)
c_aop_url_oci_apac          constant varchar2(50) := 'https://api-apac.apexofficeprint.com/';
--### Available constants
--### _Template and Data Type_
c_source_type_apex          constant varchar2(4)  := 'APEX';           -- Template Type
c_source_type_workspace     constant varchar2(9)  := 'WORKSPACE';      -- Template Type
c_source_type_sql           constant varchar2(3)  := 'SQL';            -- Template and Data Type
c_source_type_plsql_sql     constant varchar2(9)  := 'PLSQL_SQL';      -- Template and Data Type
c_source_type_plsql         constant varchar2(5)  := 'PLSQL';          -- Template and Data Type
c_source_type_url           constant varchar2(3)  := 'URL';            -- Template and Data Type
c_source_type_url_aop       constant varchar2(7)  := 'URL_AOP';        -- Template Type
c_source_type_rpt           constant varchar2(6)  := 'IR';             -- Data Type
c_source_type_xml           constant varchar2(3)  := 'XML';            -- Data Type
c_source_type_json          constant varchar2(4)  := 'JSON';           -- Template and Data Type
c_source_type_json_files    constant varchar2(10) := 'JSON_FILES';     -- Data Type
c_source_type_refcursor     constant varchar2(9)  := 'REFCURSOR';      -- Data Type
c_source_type_sql_array     constant varchar2(9)  := 'SQL_ARRAY';      -- Data Type
c_source_type_filename      constant varchar2(8)  := 'FILENAME';       -- Template Type
c_source_type_db_directory  constant varchar2(12) := 'DB_DIRECTORY';   -- Template Type
c_source_type_aop_report    constant varchar2(10) := 'AOP_REPORT';     -- Template Type
c_source_type_apex_report   constant varchar2(11) := 'APEX_REPORT';    -- Template Type
c_source_type_apex_report_do constant varchar2(14):= 'APEX_REPORT_DO'; -- Template Type
c_source_type_layouts       constant varchar2(14) := 'REPORT_LAYOUTS'; -- Template Type
c_source_type_aop_template  constant varchar2(1)  := null;             -- Template Type
c_source_type_clob_base64   constant varchar2(11) := 'CLOB_BASE64';    -- Template Type
c_source_type_oci_objs      constant varchar2(8)  := 'OCI_OBJS';       -- Template Type
c_source_type_none          constant varchar2(4)  := 'NONE';           -- Template and Data Type
--### Converter
c_source_type_converter     constant varchar2(9)  := 'CONVERTER';
--### Mime Type
c_mime_type_docx            constant varchar2(71) := 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
c_mime_type_xlsx            constant varchar2(65) := 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
c_mime_type_pptx            constant varchar2(73) := 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
c_mime_type_doc             constant varchar2(71) := 'application/msword';
c_mime_type_xls             constant varchar2(71) := 'application/vnd.ms-excel';
c_mime_type_ppt             constant varchar2(71) := 'application/vnd.ms-powerpoint';
c_mime_type_odt             constant varchar2(39) := 'application/vnd.oasis.opendocument.text';
c_mime_type_ods             constant varchar2(46) := 'application/vnd.oasis.opendocument.spreadsheet';
c_mime_type_odp             constant varchar2(47) := 'application/vnd.oasis.opendocument.presentation';
c_mime_type_pdf             constant varchar2(15) := 'application/pdf';
c_mime_type_html            constant varchar2(9)  := 'text/html';
c_mime_type_markdown        constant varchar2(13) := 'text/markdown';
c_mime_type_rtf             constant varchar2(15) := 'application/rtf';
c_mime_type_json            constant varchar2(16) := 'application/json';
c_mime_type_xml             constant varchar2(15) := 'application/xml';
c_mime_type_text            constant varchar2(10) := 'text/plain';
c_mime_type_csv             constant varchar2(10) := 'text/csv';
c_mime_type_png             constant varchar2(9)  := 'image/png';
c_mime_type_jpg             constant varchar2(10) := 'image/jpeg';
c_mime_type_gif             constant varchar2(9)  := 'image/gif';
c_mime_type_bmp             constant varchar2(9)  := 'image/bmp';
c_mime_type_msbmp           constant varchar2(19) := 'image/x-windows-bmp';
c_mime_type_docm            constant varchar2(48) := 'application/vnd.ms-word.document.macroenabled.12';
c_mime_type_xlsm            constant varchar2(46) := 'application/vnd.ms-excel.sheet.macroenabled.12';
c_mime_type_pptm            constant varchar2(58) := 'application/vnd.ms-powerpoint.presentation.macroenabled.12';
c_mime_type_ics             constant varchar2(13) := 'text/calendar';
c_mime_type_ifb             constant varchar2(13) := 'text/calendar';
c_mime_type_eml             constant varchar2(14) := 'message/rfc822';
c_mime_type_msg             constant varchar2(26) := 'application/vnd.ms-outlook';
c_mime_type_zip             constant varchar2(26) := 'application/zip';
--### Calender Type
c_cal_month                 constant varchar2(19) := 'month';
c_cal_week                  constant varchar2(19) := 'week';
c_cal_day                   constant varchar2(19) := 'day';
c_cal_list                  constant varchar2(19) := 'list';
--### Output Encoding
c_output_encoding_raw       constant varchar2(3)  := 'raw';
c_output_encoding_base64    constant varchar2(6)  := 'base64';
--### Output Type
c_word_docx                 constant varchar2(4)  := 'docx';
c_excel_xlsx                constant varchar2(4)  := 'xlsx';
c_powerpoint_pptx           constant varchar2(4)  := 'pptx'; 
c_opendocument_odt          constant varchar2(3)  := 'odt';
c_opendocument_ods          constant varchar2(3)  := 'ods';
c_opendocument_odp          constant varchar2(3)  := 'odp'; 
c_word_doc                  constant varchar2(3)  := 'doc';
c_excel_xls                 constant varchar2(3)  := 'xls';
c_powerpoint_ppt            constant varchar2(3)  := 'ppt'; 
c_pdf_pdf                   constant varchar2(3)  := 'pdf'; 
c_html_html                 constant varchar2(4)  := 'html';
c_markdown_md               constant varchar2(2)  := 'md';
c_text_txt                  constant varchar2(3)  := 'txt'; 
c_csv_csv                   constant varchar2(3)  := 'csv'; 
c_word_rtf                  constant varchar2(3)  := 'rtf';
c_word_macro_docm           constant varchar2(4)  := 'docm';
c_excel_macro_xlsm          constant varchar2(4)  := 'xlsm';
c_powerpoint_macro_pptm     constant varchar2(4)  := 'pptm'; 
c_calendar_ics              constant varchar2(3)  := 'ics';
c_calendar_ifb              constant varchar2(3)  := 'ifb';
c_json_json                 constant varchar2(4)  := 'json';
c_xml_xml                   constant varchar2(3)  := 'xml';
c_email_eml                 constant varchar2(3)  := 'eml';  
c_email_msg                 constant varchar2(3)  := 'msg';  
c_zip_zip                   constant varchar2(3)  := 'zip';  
c_onepagepdf_pdf            constant varchar2(10) := 'onepagepdf';
c_count_tags                constant varchar2(10) := 'count_tags';
c_get_attachments           constant varchar2(16) := 'get_attachments';
c_xfa_form_fields           constant varchar2(16) := 'xfa_form_fields';
c_form_fields               constant varchar2(11) := 'form_fields';
c_defined_by_apex_item      constant varchar2(9)  := 'apex_item';
--### Output To
c_output_return             constant varchar2(1)  := null;
c_output_browser            constant varchar2(7)  := 'BROWSER';
c_output_procedure          constant varchar2(9)  := 'PROCEDURE';
c_output_procedure_browser  constant varchar2(17) := 'PROCEDURE_BROWSER';
c_output_procedure_inline   constant varchar2(17) := 'PROCEDURE_INLINE';
c_output_inline             constant varchar2(14) := 'BROWSER_INLINE'; 
c_output_directory          constant varchar2(9)  := 'DIRECTORY';
c_output_db_directory       constant varchar2(12) := 'DB_DIRECTORY';
c_output_cloud              constant varchar2(5)  := 'CLOUD';
c_output_async              constant varchar2(5)  := 'ASYNC';
c_output_web_service        constant varchar2(12) := 'WEB_SERVICE';
c_apex_office_edit          constant varchar2(16) := 'APEX_OFFICE_EDIT';
c_pdf_region_pro            constant varchar2(14) := 'PDF_REGION_PRO';
--### Special
c_special_number_as_string  constant varchar2(16) := 'NUMBER_TO_STRING';
c_special_report_as_label   constant varchar2(16) := 'REPORT_AS_LABELS';
c_special_ir_filters_top    constant varchar2(14) := 'FILTERS_ON_TOP';
c_special_ir_highlights_top constant varchar2(17) := 'HIGHLIGHTS_ON_TOP';
c_special_ir_excel_header_f constant varchar2(18) := 'HEADER_WITH_FILTER';
c_special_ir_saved_report   constant varchar2(19) := 'ALWAYS_REPORT_ALIAS';
c_special_ir_repeat_header  constant varchar2(13) := 'REPEAT_HEADER';
c_obfuscate_data            constant varchar2(14) := 'OBFUSCATE_DATA';
--### Debug
c_debug_remote              constant varchar2(3)  := 'Yes';
c_debug_local               constant varchar2(5)  := 'Local';
c_debug_application_item    constant varchar2(9)  := 'APEX_ITEM';
--### Converter
c_converter_libreoffice     constant varchar2(7)  := 'soffice';            -- LibreOffice 
c_converter_libreoffice_sa  constant varchar2(18) := 'soffice-standalone'; -- LibreOffice Standalone
c_converter_msoffice        constant varchar2(11) := 'officetopdf';        -- MS Office (only Windows)
c_converter_custom          constant varchar2(7)  := 'custom';             -- Custom converter defined in the AOP Server config
--### Mode
c_mode_production           constant varchar2(15) := 'production';
c_mode_development          constant varchar2(15) := 'development';
--### Supported Languages; used for the translation of IR
c_en                        constant varchar2(5)  := 'en';
c_nl                        constant varchar2(5)  := 'nl';
c_fr                        constant varchar2(5)  := 'fr';
c_de                        constant varchar2(5)  := 'de';
--### Strings 
c_init_null                 constant varchar2(5)  := 'null;';
c_false                     constant varchar2(5)  := 'false';
c_true                      constant varchar2(4)  := 'true';
c_yes                       constant varchar2(3)  := 'Yes';
c_no                        constant varchar2(2)  := 'No';
c_y                         constant varchar2(1)  := 'Y';
c_n                         constant varchar2(1)  := 'N';
--### Internal Use for conditional compilation - see api.sql 
c_apex_050                  constant pls_integer := 20130101;
c_apex_051                  constant pls_integer := 20160824;
c_apex_181                  constant pls_integer := 20180404;
c_apex_182                  constant pls_integer := 20180928;
c_apex_191                  constant pls_integer := 20190331;
c_apex_192                  constant pls_integer := 20191004;
c_apex_201                  constant pls_integer := 20200331;
c_apex_202                  constant pls_integer := 20201001;
c_apex_211                  constant pls_integer := 20210415;
c_apex_212                  constant pls_integer := 20211015;
c_apex_221                  constant pls_integer := 20220412;
c_apex_222                  constant pls_integer := 20221007;
--## TYPES
type t_query is record (
    name  varchar2(30),
    query varchar2(32767),
    binds wwv_flow_plugin_util.t_bind_list);
type t_query_list is table of t_query index by pls_integer;
c_sql_array t_query_list;
--type t_bind_record is record(name varchar2(100), value varchar2(32767));
--type t_bind_table  is table of t_bind_record index by pls_integer;
c_binds wwv_flow_plugin_util.t_bind_list;
--## VARIABLES
--### Logger
g_logger_enabled             boolean := true;        -- In case you use Logger (https://github.com/OraOpenSource/Logger), you can compile this package to enable Logger output:
                                                     -- SQL> ALTER PACKAGE aop_api23_pkg COMPILE PLSQL_CCFLAGS = 'logger_on:TRUE';
                                                     -- When compiled and this global variable is set to true, debug will be written to logger too
--### Call to AOP 
g_aop_url                    varchar2(200) := null;  -- AOP Server url
g_api_key                    varchar2(50)  := null;  -- AOP API Key; only needed when AOP Cloud is used (http(s)://www.apexofficeprint.com/api)
g_aop_mode                   varchar2(15)  := null;  -- AOP Mode can be development or production; when running in development no cloud credits are used but a watermark is printed
g_failover_aop_url           varchar2(200) := null;  -- AOP Server url in case of failure of AOP url
g_failover_procedure         varchar2(200) := null;  -- When the failover url is used, the procedure specified in this variable will be called
g_template_type              varchar2(100) := null;  -- Specify the template type (xlsx, docx, ...) in case the filename is not part of the template source (e.g. URL of OneDrive or Object Storage)
g_output_converter           varchar2(50)  := null;  -- Set the converter to go to PDF (or other format different from template) e.g. officetopdf, libreoffice or libreoffice-standalone
g_output_locale              varchar2(50)  := null;  -- When using openofficeconverter, set the locale e.g. en, ne etc. 
g_output_image_resolution    varchar2(50)  := null;  -- When using openofficeconverter, set the resolution of the image e.g. 300dpi, 600dpi, 900dpi or 1200dpi 
g_output_jpeg_compression    varchar2(50)  := null;  -- When using openofficeconverter, specify the JPEG compression, percentage between 0-100
g_output_convert_to_pdfa     varchar2(50)  := null;  -- When using openofficeconverter, specify 1b or 2b which are standard PDF compliant versions, specifying any true value will convert to a PDF/A 1b compliant PDF.
g_output_correct_page_nr     boolean       := false; -- boolean to check for AOPMergePage text to replace it with the page number.
g_output_lock_form           boolean       := false; -- boolean that determines if the pdf forms should be locked/flattened.
g_lock_form_ignoring_sign    boolean       := false; -- boolean that determines to lock/flatten everything in the output PDF but not the signature fields
g_sign_certificate_field     varchar2(100) := '';    -- the name of the signature field to sign the output document (optional: invisible signature will be placed otherwise)
g_identify_form_fields       boolean       := false; -- boolean that fills in the name of the fields of a PDF Form in the field itself so it's easy to identify which field is at what position
g_proxy_override             varchar2(300) := null;  -- null=proxy defined in the application attributes
g_transfer_timeout           number(6)     := 1800;  -- default of APEX is 180
g_wallet_path                varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
g_wallet_pwd                 varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
g_https_host                 varchar2(300) := null;  -- The host name to be matched against the common name (CN) of the remote server's certificate for an HTTPS request.
g_apex_web_service_rheader_n2 varchar2(200) := null; -- Add a custome request header name when calling the AOP Server. This variable will set: apex_web_service.g_request_headers(2).name
g_apex_web_service_rheader_v2 varchar2(4000):= null; -- Add a custome request header value when calling the AOP Server. This variable will set: apex_web_service.g_request_headers(2).value
g_output_filename            varchar2(300) := null;  -- output
g_cloud_provider             varchar2(100) := null;  -- dropbox, gdrive, onedrive, aws_s3, (s)ftp
g_cloud_location             varchar2(4000):= null;  -- directory in dropbox, gdrive, onedrive, aws_s3 (with bucket), (s)ftp
g_cloud_access_token         varchar2(4000):= null;  -- access token or credentials for dropbox, gdrive, onedrive, aws_s3, (s)ftp (needs json)
g_language                   varchar2(2)   := c_en;  -- Language can be: en, fr, nl, de, used for the translation of filters applied etc. (translation build-in AOP)
g_app_language               varchar2(20)  := null;  -- Language specified in the APEX app (primary language, translated language), when left to null, apex_util.get_session_lang is being used
g_logging                    clob          := '';    -- ability to add your own logging: e.g. "request_id":"123", "request_app":"APEX", "request_user":"RND"
g_debug                      varchar2(10)  := null;  -- set to 'Local' when only the JSON needs to be generated, 'Remote' for remote debug
g_debug_procedure            varchar2(4000):= null;  -- when debug in APEX is turned on, next to the normal APEX debug, this procedure will be called
                                                     --   e.g. to write to your own debug table. The definition of the procedure needs to be the same as aop_debug
g_special                    varchar2(4000):= null;  -- Special settings defined in the APEX Plug-in concerning Reports (colon separated), see p_special
g_app_id                     number        := null;  -- APEX application id
g_page_id                    number        := null;  -- APEX page id
g_user_name                  varchar2(200) := null;  -- APEX user name (APP_USER)
g_force_create_apex_session  boolean       := false; -- Force creating a new APEX session
--### APEX Page Items 
g_apex_items                 varchar2(4000):= null;  -- colon-separated list of APEX items e.g. P1_X:P1_Y, which can be referenced in a template using {Pxx_ITEM}
                                                     -- you can only use this global variable in combination with reports (classic, IR, IG, ...).
                                                     -- When using a SQL Query, you can define the page item in your SQL query, e.g. :P1_ITEM as "P1_ITEM"
--### Layout for IR  
g_rpt_header_font_name       varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163
g_rpt_header_font_size       varchar2(3)   := '';    -- 14
g_rpt_header_font_color      varchar2(50)  := '';    -- #071626
g_rpt_header_back_color      varchar2(50)  := '';    -- #FAFAFA
g_rpt_header_border_width    varchar2(50)  := '';    -- 1 ; '0' = no border
g_rpt_header_border_color    varchar2(50)  := '';    -- #000000
g_rpt_break_font_color       varchar2(50)  := '';    -- #071626
g_rpt_break_back_color       varchar2(50)  := '';    -- #FAFAFA
g_rpt_break_show_header      varchar2(1)   := null;  -- Show the header again after the break (Y/N)
g_rpt_data_font_name         varchar2(50)  := '';    -- Arial - see https://www.microsoft.com/typography/Fonts/product.aspx?PID=163
g_rpt_data_font_size         varchar2(3)   := '';    -- 14
g_rpt_data_font_color        varchar2(50)  := '';    -- #000000
g_rpt_data_back_color        varchar2(50)  := '';    -- #FFFFFF
g_rpt_data_border_width      varchar2(50)  := '';    -- 1 ; '0' = no border
g_rpt_data_border_color      varchar2(50)  := '';    -- #000000
g_rpt_data_alt_row_color     varchar2(50)  := '';    -- #FFFFFF for no alt row color, use same color as g_rpt_data_back_color
g_rpt_header_vertical_align  varchar2(50)  := '';    -- possible values: top, center, bottom
g_rpt_data_vertical_align    varchar2(50)  := '';    -- possible values: top, center, bottom
/* see also Printing attributes in Interactive Report */
g_is_component_used_yn       varchar2(1)   := null;  -- If you want to override the is_component_used_yn, you can specify 'Y' to always show or 'N' to never show.
g_visible_report_columns     varchar2(4000):= null;  -- Colon separated list of classic report, interactive report or interactive grid columns e.g. EMPNO:ENAME,
                                                     -- which will be visible regardless of authorization and condition
g_hidden_report_columns      varchar2(4000):= null;  -- Colon separated list of classic report, interactive report or interactive grid columns e.g. EMPNO:ENAME
                                                     -- which will be hidden regardless of authorization and condition
--### Settings for Calendar
g_cal_type                   varchar2(10)  := c_cal_month; -- can be month (default), week, day, list; constants can be used
g_start_date                 date          := null;  -- start date of calendar
g_end_date                   date          := null;  -- end date of calendar
g_weekdays                   varchar2(300) := null;  -- translation for weekdays e.g. Monday:Tuesday:Wednesday etc.
g_months                     varchar2(300) := null;  -- translation for months   e.g. January:February etc.  
g_color_days_sql             varchar2(4000):= null;  -- color the background of certain days.
                                                     --   e.g. select 1 as "id", sysdate as "date", 'FF8800' as "color" from dual
g_separate_pages             varchar2(5)   := 'false'; -- start calendar on new page (true) or start calendar on same page
g_alignment                  varchar2(5)   := 'right'; -- align text on calender: left center or right
g_title_alignment            varchar2(5)   := 'right'; -- align title of the calendar: left right or center
g_day_alignment              varchar2(5)   := 'right'; -- align days of the calendar: left right or center
g_start_of_week              varchar2(3)   := 'Mon';   -- start of the week day: Monday (Mon) or Sunday (Sun)
g_new_row_per_event          varchar2(5)   := 'false'; -- show events vertically in new row (true). Show events horizontally in new column (false). Default is false.
--### Call to URL data source
g_url_http_method            varchar2(10)  := 'GET';
g_url_username               varchar2(300) := null;
g_url_password               varchar2(300) := null;
g_url_schema                 varchar2(100) := 'Basic';
g_url_proxy_override         varchar2(300) := null;
g_url_transfer_timeout       number        := 180;
g_url_body                   clob          := empty_clob();
g_url_body_blob              blob          := empty_blob();
g_url_parm_name              apex_application_global.vc_arr2; --:= empty_vc_arr;
g_url_parm_value             apex_application_global.vc_arr2; --:= empty_vc_arr;
g_url_wallet_path            varchar2(300) := null;
g_url_wallet_pwd             varchar2(300) := null;
g_url_https_host             varchar2(300) := null;  -- parameter for apex_web_service, not used, please apply APEX patch if issues
g_url_credential_static_id   varchar2(300) := null;
g_url_token_url              varchar2(300) := null;
--### Web Source Module (APEX >= 18.1)
g_web_source_first_row       pls_integer   := null;  -- parameter for apex_exec.open_web_source_query
g_web_source_max_rows        pls_integer   := null;  -- parameter for apex_exec.open_web_source_query
g_web_source_total_row_cnt   boolean       := false; -- parameter for apex_exec.open_web_source_query
--### REST Enabled SQL (APEX >= 18.1)
g_rest_sql_auto_bind_items   boolean       := true;  -- parameter for apex_exec.open_remote_sql_query
g_rest_sql_first_row         pls_integer   := null;  -- parameter for apex_exec.open_remote_sql_query
g_rest_sql_max_rows          pls_integer   := null;  -- parameter for apex_exec.open_remote_sql_query
g_rest_sql_total_row_cnt     boolean       := false; -- parameter for apex_exec.open_remote_sql_query
g_rest_sql_total_row_limit   pls_integer   := null;  -- parameter for apex_exec.open_remote_sql_query
--### Input Data
g_replace_special_symbols    varchar2(5)   := null;  -- Option to replace special symbols in the selected columns/keys. Replaces +, -, *, /, and  % by _.
g_override_html_expr_on_null boolean       := false; -- When HTML expressions are being used in reports, but they are null, they can be overwritten to use the report_null_values_as
--### IP Printer support
g_ip_printer_location        varchar2(300) := null;
g_ip_printer_version         varchar2(300) := '1';
g_ip_printer_requester       varchar2(300) := nvl(apex_application.g_user, USER);
g_ip_printer_job_name        varchar2(300) := 'AOP';
g_ip_printer_return_output   varchar2(5)   := null;  -- null or 'Yes' or 'true'
--### AOP Processing
g_pre_conversion_command     varchar2(4000):= null; -- The command to execute before the conversion to another file format. This command should be present on aop_config.json file.
g_pre_conversion_command_p   varchar2(4000):= null; -- Parameter (in JSON) before the conversion to another file format. These parameters should be present on aop_config.json file.
g_post_conversion_command    varchar2(4000):= null; -- The command to execute after the conversion to another file format. This command should be present on aop_config.json file.
g_post_conversion_command_p  varchar2(4000):= null; -- Parameter (in JSON) after the conversion to another file format. These parameters should be present on aop_config.json file.
g_post_merge_command         varchar2(4000):= null; -- The command to execute after the merge of files. This command should be present on aop_config.json file.
g_post_merge_command_p       varchar2(4000):= null; -- Parameter (in JSON) after the merge of files. These parameters should be present on aop_config.json file.
g_pipeline_name              varchar2(4000):= null; -- The name of the pipeline that will be executed.
g_post_process_command       varchar2(4000):= null; -- The command to execute. This command should be present on aop_config.json file.
g_post_process_command_p     varchar2(4000):= null; -- Parameter (in JSON) in the post process command. These parameters should be present on aop_config.json file.
g_post_process_return_output boolean       := true; -- Either to return the output or not. Note this output is AOP's output and not the post process command output.
g_post_process_delete_delay  number(9)     := 1500; -- AOP deletes the file provided to the command directly after executing it. This can be delayed with this option. Integer in milliseconds.
--### AOP Config
g_aop_config                 varchar2(32767):= null; -- AOP config file; anything here will overwrite or extend other attributes in the JSON. Make sure this is valid JSON.
--### Convert characterset 
g_convert                    varchar2(1)   := c_n;   -- set to Y (c_y) if you want to convert the JSON that is send over; necessary for Arabic support
g_convert_source_charset     varchar2(20)  := null;  -- default of database
g_convert_target_charset     varchar2(20)  := 'AL32UTF8';  
g_stop_apex_engine           varchar2(1)   := c_n;   -- stop the APEX engine
g_run_with_dbms_scheduler    varchar2(1)   := c_n;   -- Run the call in the background through a dbms_scheduler job, when finished call defined procedure. 
--### Output
-- set output directory on AOP Server
-- if . is specified the files are saved in the default directory: outputfiles
g_output_directory           varchar2(200) := '.';   
g_output_sign_certificate    varchar2(32000):= null; -- sign PDF with signature which is base64 encoded
g_output_sign_certificate_pwd varchar2(500):= null;  -- sign PDF with password
g_output_sign_certificate_fld varchar2(500):= null;  -- sign PDF with the given signature field name
g_output_sign_certificate_img varchar2(32767):= null;-- sign PDF with the given base64 encoded image as background for visible signature
g_output_sign_certificate_prp varchar2(32767):= null;-- sign PDF with the certificate privatekey password
g_output_split               varchar2(5)   := null;  -- split file: one file per page: true/false
g_output_merge               varchar2(5)   := null;  -- merge files into one PDF true/false
g_output_icon_font           varchar2(20)  := null;  -- the icon font to use for the output, Font-APEX or Font Awesome 5 (default)
g_output_even_page           varchar2(5)   := null;  -- PDF option to always print even pages (necessary for two-sided pages): true/false
g_output_merge_making_even   varchar2(5)   := null;  -- PDF option to merge making all documents even paged (necessary for two-sided pages): true/false
g_output_page_margin         varchar2(50)  := null;  -- HTML to PDF option: margin in px, can also add top, bottom, left, right
g_output_page_orientation    varchar2(10)  := null;  -- HTML to PDF option: portrait (default) or landscape
g_output_page_width          varchar2(10)  := null;  -- HTML to PDF option: width in px, mm, cm, in. No unit means px.
g_output_page_height         varchar2(10)  := null;  -- HTML to PDF option: height in px, mm, cm, in. No unit means px.
g_output_page_format         varchar2(10)  := null;  -- HTML to PDF option: a4 (default), letter
g_output_page_number_start_at varchar2(10) := null;  -- Change the start of the page numbers in the template
g_output_remove_last_page    boolean       := false; -- PDF option to remove the last page; e.g. when the last page is empty
g_output_ignore_conv_errors  boolean       := false; -- PDF option to ignore conversion errors during appending and prepending of files
g_output_modified_date       varchar2(50)  := null;  -- Word/Powerpoint template option to set the modified date of the file. Must be in ISO format (Example: "2022-02-07T12:55:12") or in the date time format ("YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD")
g_output_created_date        varchar2(50)  := null;  -- Word/Powerpoint template option to set the created date of the file. Must be in ISO format (Example: "2022-02-07T12:55:12") or in the date time format ("YYYY-MM-DD HH:mm:ss", "YYYY-MM-DD")
g_output_compression         varchar2(10)  := null;  -- Compression algorithm: zip
g_output_compression_name    varchar2(50)  := null;  -- Name of the file after compression
g_output_form_fill_font      varchar2(250) := null;  -- The name of the font when filling in a PDF Form, The font must be installed on the system, or provided as a file on assets folder or root of aop.
g_output_attachment_text     varchar2(250) := null;  -- Specify the information string you want to place in the attachment retrieved from eml file (email), e.g. "Current Page: {attachmentCurrentPage} Total Pages: {attachmentTotalPage} Attachment Number : {attachmentIndex} of {attachmentFilename}"
g_output_attachment_text_pos varchar2(20)  := null;  -- The position of attachment text in the attachment retrieved from eml file (email), e.g. bottom-left, bottom-right, top-left, top-right or center
g_output_attachment_xml_json boolean       := false;  -- While retrieving PDF attachments, if the attachment is an xml file, convert it to json.  
g_output_insert_barcode      boolean       := false; -- Insert a barcode in the PDF. This option should be provided as true while using {|barcode} tag on pdf template      
--### Async call to AOP; a URL will be returned where the file can be polled from 
g_async_status               varchar2(4000):= null;  -- Get the status of the async call (OK, error, false)
g_async_message              varchar2(4000):= null;  -- Get the status message of the async call 
g_async_url                  varchar2(4000):= null;  -- Get the URL where you can get the file when processing is complete
--### Call a Web Service where AOP will send the file to (POST Request)
g_web_service_url            varchar2(500) := null;  -- URL to be called once AOP has created the document. AOP will do a POST request and headers can be specified
g_web_service_headers        varchar2(4000):= null;  -- The headers for the POST request e.g. {"file_id": "F123", "access_token": "A456789"}
--### Files
g_prepend_files_sql          clob          := null;  -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server], [read_password] from my_table
g_append_files_sql           clob          := null;  -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server], [read_password] from my_table
g_media_files_sql            clob          := null;  --  
g_output_prepend_per_page    boolean       := false; -- Prepend one or more pages before each page in the output. E.g. logo and company details before every document
g_output_append_per_page     boolean       := false; -- Append one or more pages after each page in the output. E.g. terms of conditions after every invoice
--### Templates
g_template_start_delimiter   varchar2(2)   := null;  -- { is the default start delimiter used is a template, but you can set this variable with the following options: {, {{, <, <<
g_template_end_delimiter     varchar2(2)   := null;  -- } is the default end delimiter used in a template, but you can set this variable with the following options: }, }}, >, >>
g_cache_template             boolean       := false; -- cache the template; an hash is returned in g_template_cache_hash
g_template_cache_hash        varchar2(128) := null;  -- the hashed value of the cached version of the template on the AOP Server/Cloud
g_use_template_when_no_cache varchar2(1)   := c_n;   -- by default when a template hash is sent and it's no longer available it will raise an error.
                                                     -- when set to Y(es), AOP will first check if the template is still available and if not include the full template when available.
--### Sub-Templates
g_sub_templates_sql          clob          := null;  -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server, name] from my_table
--### Attachments
g_attachments_sql       clob          := null;  -- format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server, name] from my_table
--### Password protected PDF
g_output_read_password       varchar2(200) := null; -- protect PDF to read
g_output_modify_password     varchar2(200) := null; -- protect PDF to write (modify)
g_output_pwd_protection_flag number(4)     := null; -- optional; default is 4. 
                                                    -- Number when bit calculation is done as specified in http://pdfhummus.com/post/147451287581/hummus-1058-and-pdf-writer-updates-encryption
g_output_pdf_producer        varchar2(4000):= null; -- PDF meta-data set producer data tag
g_output_watermark           varchar2(4000):= null; -- Watermark in PDF
g_output_watermark_color     varchar2(500) := null; -- Watermark option color
g_output_watermark_font      varchar2(500) := null; -- Watermark option font
g_output_watermark_size      varchar2(500) := null; -- Watermark option width
g_output_watermark_opacity   varchar2(500) := null; -- Watermark option opacity
g_output_copies              number        := null; -- Requires output pdf, repeats the output pdf for the given number of times.
--### IG
g_ig_force_query             varchar2(1)   := null; -- force the IG to use AOPs own implementation instead of apex_region.open_query_context
g_ig_use_alternative_label   varchar2(1)   := null; -- force the IG to use the alternative label for the heading
--### JSON
g_anonymize_json             varchar2(1)   := c_n;   -- set to Y (c_y) if you want to anomyze/obfuscate the JSON that is send over. This is great for debugging of sensitive data.
g_use_data_export_pjson      varchar2(1)   := c_n;   -- instead of using the AOP specific code to generate the meta-data of reports, use apex_data_export.c_format_pjson
--### CSV
g_output_text_delimiter      varchar2(200) := null;  -- delimiter for tags
g_output_field_separator     varchar2(200) := null;  -- field separator, default is ,
g_output_character_set       varchar2(200) := null;  -- character set of CSV file 
--### Word
g_update_toc                 boolean       := false; -- Update the table of contents in Word document
--### DATA EXPORT - APEX 20.2 and higher
$if wwv_flow_api.c_current >= 20201001
$then 
g_data_export_component_id   number                         := null;
g_data_export_view_mode      varchar2(100)                  := null;
g_data_export_max_rows       number                         := null;
g_data_export_file_name      varchar2(255)                  := null;
g_data_export_page_size      apex_data_export.t_size        := apex_data_export.c_size_letter;
g_data_export_orientation    apex_data_export.t_orientation := apex_data_export.c_orientation_portrait;
g_data_export_data_only      boolean                        := false;
g_data_export_pdf_accessible boolean                        := false;  
$end  
--### OCI
g_oci_credential             varchar2(150) := null;  -- Credentials used in DBMS_CLOUD (Oracle Cloud Infrastructure credentials)
g_oci_directory_name         varchar2(150) := null;  -- Directory name used in DBMS_CLOUD 
--### Inline Region
g_inline_region_static_id    varchar2(150) := null;  -- Used when Output To is set to Inline Region
--### APEX Office Edit (AOE)
g_aoe_region_static_id       varchar2(150) := null;  -- Used when Output To is set to c_apex_office_edit 
                                                     -- Specify here the Static ID of the APEX Office Edit Plug-in region 
g_aoe_primary_key_items      varchar2(4000) := null; -- the primary key items defined in APEX Office Edit colon separated (will be automatically filled)
g_aoe_primary_key_values     varchar2(4000) := null; -- the primary key values of the records that where created by the procedure colon separated
--### PDF Region Pro
g_pdf_region_static_id       varchar2(150) := null;  -- Used when Output To is set to c_pdf_region_pro
                                                     -- Specify here the Static ID of the PDF Region Pro Plug-in region 
g_pdf_primary_key_items      varchar2(4000) := null; -- the primary key items defined in PDF Region Pro colon separated (will be automatically filled)
g_pdf_primary_key_values     varchar2(4000) := null; -- the primary key values of the records that where created by the procedure colon separated
--## EXCEPTIONS
/**
 * @exception 
 */
--### FUNCTIONS AND PROCEDURES   
-- ! package body contains documentation
-- debug function, will write to apex_debug_messages, logger (if enabled) and your own debug procedure
procedure aop_debug(p_message     in varchar2, 
                    p0            in varchar2 default null, 
                    p1            in varchar2 default null, 
                    p2            in varchar2 default null, 
                    p3            in varchar2 default null, 
                    p4            in varchar2 default null, 
                    p5            in varchar2 default null, 
                    p6            in varchar2 default null, 
                    p7            in varchar2 default null, 
                    p8            in varchar2 default null, 
                    p9            in varchar2 default null, 
                    p10           in varchar2 default null, 
                    p11           in varchar2 default null, 
                    p12           in varchar2 default null, 
                    p13           in varchar2 default null, 
                    p14           in varchar2 default null, 
                    p15           in varchar2 default null, 
                    p16           in varchar2 default null, 
                    p17           in varchar2 default null, 
                    p18           in varchar2 default null, 
                    p19           in varchar2 default null, 
                    p_level       in apex_debug.t_log_level default apex_debug.c_log_level_info, 
                    p_description in clob default null);
-- convert clob to base64, handy for HTML templates 
function clob2base64(p_clob in clob)
return clob;
-- convert base64 to clob
function base642clob(p_base64 in clob)
return clob;
-- convert a url with for example an image to base64
function url2base64 (
  p_url in varchar2)
  return clob;
-- get the value of one of the above constants
function getconstantvalue (
  p_constant in varchar2)
  return varchar2 deterministic;
-- get the mime type of a file extention: docx, xlsx, pptx, pdf
function getmimetype (
  p_file_ext in varchar2)
  return varchar2 deterministic;
-- get the file extention of a mime type
function getfileextension (
  p_mime_type in varchar2)
  return varchar2 deterministic;  
-- get the Font Awesome / APEX icon of a mime type
function geticon (
  p_mime_type in varchar2)
  return varchar2 deterministic;  
-- convert a blob to a clob
function blob2clob(p_blob in blob)
  return clob;
-- convert a clob to a blob
function clob2blob(p_clob in clob)
  return blob;
-- convert a blob to a file in the database directory
procedure blob2file(p_blob      in blob,
                    p_directory in varchar2,
                    p_filename  in varchar2);
-- convert a file to a blob
function file2blob(p_directory in varchar2,
                   p_filename  in varchar2)
  return blob;
-- internal function to check a server-side condition
function is_component_used_yn(p_build_option_id         in number default null,
                              p_authorization_scheme_id in varchar2,
                              p_condition_type          in varchar2,
                              p_condition_expression1   in varchar2,
                              p_condition_expression2   in varchar2,
                              p_component               in varchar2 default null,
                              p_report_column           in varchar2 default null)
  return varchar2;
-- internal function to get the bind variables of a SQL statement
function get_binds (
    p_stmt in clob )
    return sys.dbms_sql.varchar2_table;
-- check template and output type compatibility
-- template and output type can be mime_type or file extension
function is_valid_output_type(p_template_type in varchar2,
                              p_output_type   in varchar2)
  return boolean;
-- check if the hash of the template cache is still valid and present on the AOP Server/Cloud
function is_valid_template_hash(p_aop_url in varchar2 default g_aop_url,
                                p_hash    in varchar2)
  return boolean;
/**
 * @Description: Call to AOP Server through API, used behind the scenes by the APEX plug-in, but a manual call can be done with PL/SQL too.
 *
 * @Author: Dimitri Gielis
 * @Created: 2016-8-2
 *
 * @Param: p_data_type Define where the data is coming from. 
 *                     Following constants exists in aop_api_pkg: c_source_type_sql, c_source_type_plsql_sql, c_source_type_plsql, c_source_type_url, c_source_type_rpt, c_source_type_refcursor, c_source_type_sql_array, c_source_type_xml, c_source_type_json, c_source_type_json_files, c_source_type_none
 * @Param: p_data_source Depending the data type, define here the source:
 *                         - c_source_type_sql: SQL statement with cursor syntax or returning JSON
 *                         - c_source_type_plsql_sql: PL/SQL function returning SQL statement with mime type and blob
 *                         - c_source_type_plsql: PL/SQL function returning JSON with the template file base64 encoded
 *                         - c_source_type_url: URL which contains the file
 *                         - c_source_type_rpt: static id(s) or region id(s) of the APEX regions
 *                         - c_source_type_refcursor: REF Cursor
 *                         - c_source_type_sql_array: Array of SQL statements
 *                         - c_source_type_xml: XML
 *                         - c_source_type_json: JSON data part
 *                         - c_source_type_json_files: JSON including files
 *                         - c_source_type_none: leave the source blank
 * @Param: p_template_type Define where the template is stored. 
 *                         Following constants exists in aop_api_pkg: c_source_type_apex, c_source_type_workspace, c_source_type_sql, c_source_type_plsql_sql, c_source_type_plsql, 
 *                                                                    c_source_type_url, c_source_type_filename, c_source_type_url_aop, c_source_type_json, c_source_type_db_directory, c_source_type_oci_objs, 
 *                                                                    c_source_type_aop_report, c_source_type_apex_report, c_source_type_aop_template, c_source_type_clob_base64, c_source_type_none
 * @Param: p_template_source Depending the template_type, define here the filename, SQL statement, PL/SQL function or URL:
 *                         - c_source_type_apex: file uploaded in APEX Static Application Files
 *                         - c_source_type_workspace: file uploaded in APEX Workspace Files
 *                         - c_source_type_sql: SQL statement returning mime type and blob
 *                         - c_source_type_plsql_sql: PL/SQL function returning SQL statement with mime type and blob
 *                         - c_source_type_plsql: PL/SQL function returning JSON with the template file base64 encoded
 *                         - c_source_type_url: URL which contains the file (will be read from DB server)
 *                         - c_source_type_url_aop: URL which contains the file (will be read from AOP server)
 *                         - c_source_type_filename: file specified in a directory on the AOP Server
 *                         - c_source_type_db_directory: file specified in a directory on the Database Server, use DIRECTORY:filename
 *                         - c_source_type_json: JSON with the template file base64 encoded 
 *                         - c_source_type_clob_base64: BLOB in CLOB base64 encoded (user apex_web_service.blob2clobbase64) 
 *                         - c_source_type_aop_template: AOP will generate a starter template
 *                         - c_source_type_aop_report: AOP will use it's own template, used to generate one or more APEX regions
 *                         - c_source_type_apex_report: APEX will generate one region (native functionality)
 *                         - c_source_type_oci_objs: Oracle Cloud Infrastructure - Object Storage
 *                         - c_source_type_none: leave the source blank
 * @Param: p_output_type Extension (pdf, xlsx, ...) or mime type (application/pdf, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, ...) of the output format. 
 *                       Following constants exists in aop_api_pkg:
 *                         - c_word_docx             
 *                         - c_excel_xlsx            
 *                         - c_powerpoint_pptx    
 *                         - c_opendocument_odt        
 *                         - c_opendocument_ods        
 *                         - c_opendocument_odp           
 *                         - c_pdf_pdf               
 *                         - c_html_html             
 *                         - c_markdown_md           
 *                         - c_text_txt              
 *                         - c_csv_csv         
 *                         - c_word_rtf              
 *                         - c_onepagepdf_pdf        
 *                         - c_count_tags
 *                         - c_get_attachments
 *                         - c_xfa_form_fields
 *                         - c_form_fields
 *                         - c_defined_by_apex_item                           
 * @Param: p_output_filename Filename of the result
 * @Param: p_output_type_item_name APEX Item holding the filename
 * @Param: p_output_to Where does the blob or file need to be sent to: 
 *                         - c_output_browser: the browser will open the file          
 *                         - c_output_inline: the output is defined for showing inline in a region
 *                         - c_output_directory: the file is stored on the AOP Server in this directory
 *                         - c_output_db_directory: the file is stored on the Database Server in this directory 
 *                         - c_output_cloud: a file is sent to the cloud (Dropbox, Amazon S3, Google Drive, Oracle Cloud) using the credentials defined in g_cloud_provider, g_cloud_location and g_cloud_access_token
 *                         - c_output_procedure: a blob will be passed to a procedure which is defined in p_procedure. 
 *                           The procedure definition needs to be: proc_name(p_output_blob in blob, p_output_filename in varchar2, p_output_mime_type in varchar2)
 *                         - c_output_procedure_browser: a blob will be passed to a procedure which is defined in p_procedure and the file is sent to the browser
 *                         - c_output_procedure_inline: a blob will be passed to a procedure which is defined in p_procedure and the file is showing inline in a region
 *                         - c_output_async: the blob will be empty and a URL will be passed to g_async_url where the file will be available to download when AOP is finished. Use the poll_async_file procedure to check and download the file.
 *                           Optionally a procedure can be defined in p_procedure with the following definition: proc_name(p_async_status in varchar2, p_async_message in varchar2, p_async_url in varchar2, p_output_filename in varchar2, p_output_mime_type in varchar2)
 *                         - c_output_web_service: AOP will call the web service (a POST Request) defined in g_web_service_url once AOP is finished producing the file. Extra headers can be added to the POST request by defining them in g_web_service_headers 
 *                         - c_apex_office_edit: a blob will be passed to a procedure which is defined in p_procedure and the file can be shown directly in APEX Office Edit (AOE), the editor that can show and edit Word, Excel, PowerPoint, PDF, and Text straight from the browser. 
 *                           The procedure definition needs to be: proc_name(p_output_blob in blob, p_output_filename in varchar2, p_output_mime_type in varchar2)
 * @Param: p_procedure Procedure that needs to be called when the file is merged
 * @Param: p_binds Bind variable for SQL or PL/SQL Source
 * @Param: p_special Special settings defined in the APEX Plug-in concerning Reports (colon separated).
 *                   Following constants can be used:
 *                        - c_special_number_as_string 
 *                        - c_special_report_as_label  
 *                        - c_special_ir_filters_top   
 *                        - c_special_ir_highlights_top
 *                        - c_special_ir_excel_header_f
 *                        - c_special_ir_saved_report  
 *                        - c_special_ir_repeat_header 
 * @Param: p_aop_remote_debug Turning debugging on will generate the JSON that is sent to the AOP Server in a file. The actual request to the AOP Server is not done. Following constants can be used:
 *                        - c_debug_remote: store the JSON in your dashboard on https://www.apexofficeprint.com
 *                        - c_debug_local: store the JSON local on your pc
 *                        - c_debug_application_item: depending the Application item AOP_DEBUG, Remote (Yes) or Local (Local) or no debugging is done
 * @Param: p_output_converter Define the PDF converter you want to use. Multiple converters can be defined in the AOP Server. e.g. officetopdf, libreoffice, libreoffice-standalone
 * @Param: p_aop_url Description: URL where the AOP Server is running. For the AOP Cloud use c_aop_url
 * @Param: p_api_key Description: API Key which can be found when you login at https://www.apexofficeprint.com
 * @Param: p_app_id APEX Application ID
 * @Param: p_page_id Page ID to call in the APEX application
 * @Param: p_user_name Username which should be used to create an APEX session
 * @Param: p_init_code Initialisation code which can be invoked in this package
 * @Param: p_output_encoding Following constants can be used: c_output_encoding_raw, c_output_encoding_base64
 * @Param: p_output_split Split PDF in multiple pages and create zip
 * @Param: p_output_merge Merge multiple files to one PDF
 * @Param: p_failover_aop_url: URL where the AOP Failover Server is running. For the AOP Cloud use c_aop_url_fallback
 * @Param: p_failover_procedure: Procedure which is called when the failover URL is being used, so you are warned the main AOP server has issues.
 * @Param: p_log_procedure: Procedure which can be defined to do your own extra logging.
 * @Param: p_prepend_files_sql: SQL statement which hold the files to include before the main report.
 *                              Format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server, read_password] from my_table
 *                              Between [] is optional and one or more columns can be included
 * @Param: p_append_files_sql: SQL statement which hold the files to include after the main report.
 *                             Format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server, read_password] from my_table
 *                             Between [] is optional and one or more columns can be included
 * @Param: p_media_files_sql: Coming soon (!); use AME API via https://www.apexmediaextension.com
 *                              Format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server], 
 *                                             [media_width, media_max_width, media_height, media_max_height, media_watermark_text, media_watermark_image, media_properties, media_output_file_type]
 *                                        from my_table
 *                              Between [] is optional and one or more columns can be included
 * @Param: p_sub_templates_sql: SQL statement which hold the sub-template Word documents.
 *                             Format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server] from my_table
 *                             Between [] is optional and one or more columns can be included 
 * @Param: p_attachments_sql: SQL statement which hold the attachments for PDF file.
 *                             Format: select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server] from my_table
 *                             Between [] is optional and one or more columns can be included 
 * @Param: p_ref_cursor: when data type is c_source_type_refcursor, we will read the ref cursor specified here 
 * @Param: p_sql_array:  when data type is c_source_type_sql_arrea, different SQL statements can be passed by using t_query_list
 * @Param: p_ig_selected_pks: add a json object with the regions and selected primary keys in format {"region_static_id": pk} e.g. {"customers": 1}
 * @Return: blob in defined output format containing result of merged template(s) with data and prepend and append files.
 *
 * @Example:
 *<code> 
 *declare
 *  l_binds           wwv_flow_plugin_util.t_bind_list;
 *  l_return          blob;
 *  l_output_filename varchar2(100) := 'output';
 *begin
 *  -- set the output to JSON, so we see what is being sent to the AOP Server (uncomment next line)
 *  -- aop_api_pkg.g_debug := 'Local';
 *  -- set output to own custom debug table (uncomment next line)
 *  -- aop_api_pkg.g_debug_procedure := 'aop_sample_pkg.custom_debug';
 *  --
 *  -- most minimalistic example 
 *  l_return := aop_api_pkg.plsql_call_to_aop (
 *                p_data_type       => aop_api_pkg.c_source_type_json,
 *                p_data_source     => '[{"hello":"world"}]',
 *                p_template_type   => aop_api_pkg.c_source_type_aop_template,
 *                p_output_type     => 'docx',
 *                p_output_filename => l_output_filename,
 *                p_aop_url         => 'http://localhost:8010'); 
 *  --
 *  --
 *  l_return := aop_api_pkg.plsql_call_to_aop (
 *                p_data_type       => aop_api_pkg.c_source_type_rpt,
 *                p_data_source     => 'report1',
 *                p_template_type   => null,
 *                p_template_source => '',
 *                p_output_type     => 'docx',
 *                p_output_filename => l_output_filename,
 *                p_binds           => l_binds,
 *                p_aop_url         => 'http://api.apexofficeprint.com',
 *                p_api_key         => '<your API key>', -- change the API key if you use the AOP Cloud
 *                p_app_id          => 498,              -- change to APEX app id
 *                p_page_id         => 100);             -- change to APEX page id
 *  
 *  -- write output to table (uncomment next line)
 *  -- insert into aop_output (output_blob, filename) values (l_return, l_output_filename);              
 *end;
*/
function plsql_call_to_aop(
  p_data_type                 in varchar2 default c_source_type_sql,
  p_data_source               in clob     default null,
  p_template_type             in varchar2 default c_source_type_apex,
  p_template_source           in clob     default null,
  p_output_type               in varchar2 default c_pdf_pdf,
  p_output_filename           in out nocopy varchar2,
  p_output_type_item_name     in varchar2 default null,
  p_output_to                 in varchar2 default null,
  p_procedure                 in varchar2 default null,
  p_binds                     in wwv_flow_plugin_util.t_bind_list default c_binds,
  p_special                   in varchar2 default null,
  p_aop_remote_debug          in varchar2 default c_no,
  p_output_converter          in varchar2 default null,
  p_aop_url                   in varchar2 default null,
  p_api_key                   in varchar2 default null,
  p_aop_mode                  in varchar2 default null,
  p_app_id                    in number   default null,
  p_page_id                   in number   default null,
  p_user_name                 in varchar2 default null,
  p_init_code                 in clob     default c_init_null,
  p_output_encoding           in varchar2 default c_output_encoding_raw,
  p_output_split              in varchar2 default c_false,
  p_output_merge              in varchar2 default c_false,
  p_output_even_page          in varchar2 default c_false,
  p_output_merge_making_even  in varchar2 default c_false,
  p_failover_aop_url          in varchar2 default null,
  p_failover_procedure        in varchar2 default null,
  p_log_procedure             in varchar2 default null,
  p_prepend_files_sql         in clob     default null,
  p_append_files_sql          in clob     default null,
  p_media_files_sql           in clob     default null,
  p_sub_templates_sql         in clob     default null,
  p_attachments_sql           in clob     default null,
  p_ref_cursor                in sys_refcursor default null,
  p_sql_array                 in t_query_list default c_sql_array,
  p_ig_selected_pks           in varchar2 default null)
  return blob;
-- retrieve underlaying PL/SQL code of APEX Plug-in call
function show_plsql_call_plugin(
  p_process_id            in number   default null,
  p_dynamic_action_id     in number   default null,
  p_show_api_key          in varchar2 default c_no)
  return clob;
-- check to see if the AOP Server is running (function returning boolean)
function is_aop_accessible(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null)
  return boolean;
-- check to see if the AOP Server is running (procedure returning with htp.p and dbms_output)
procedure is_aop_accessible(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null);
-- send a sample request to the AOP Server
procedure send_aop_sample(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null);
-- check the version of the AOP Server (function)
function get_aop_server_version(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null)
  return varchar2;
-- check the version of the AOP Server (procedure)
procedure show_aop_server_version(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null);
-- check the version of the AOP Server (function)
function get_aop_plsql_version
  return varchar2;
-- check the version of the AOP Server (procedure)
procedure show_aop_plsql_version;
-- get supported template types (function)
function get_aop_template_types(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null)
  return varchar2;
-- get supported template types (procedure)
procedure show_aop_template_types(
  p_url             in varchar2,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null);
-- get supported output types (function)
function get_aop_output_type_for_tmpl(
  p_url             in varchar2,
  p_template_type   in varchar2 default null,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null)
  return varchar2;
-- get supported output types (function)
procedure show_aop_output_type_for_tmpl(
  p_url             in varchar2,
  p_template_type   in varchar2 default null,
  p_proxy_override  in varchar2 default null,
  p_wallet_path     in varchar2 default null,
  p_wallet_pwd      in varchar2 default null);
-- async call to retrieve the file based on a URL
procedure poll_async_file (
  p_aop_url              in varchar2,
  p_proxy_override       in varchar2 default null,
  p_wallet_path          in varchar2 default null,
  p_wallet_pwd           in varchar2 default null,
  p_async_url            in varchar2,
  o_async_status         out varchar2,
  o_async_message        out varchar2,
  o_async_file           out blob);
-- APEX Plugins
-- Process Type Plugin
function f_process_aop(
  p_process in apex_plugin.t_process,
  p_plugin  in apex_plugin.t_plugin)
  return apex_plugin.t_process_exec_result;
-- Dynamic Action Plugin
function f_render_aop (
  p_dynamic_action in apex_plugin.t_dynamic_action,
  p_plugin         in apex_plugin.t_plugin)
  return apex_plugin.t_dynamic_action_render_result;
function f_ajax_aop(
  p_dynamic_action in apex_plugin.t_dynamic_action,
  p_plugin         in apex_plugin.t_plugin)
  return apex_plugin.t_dynamic_action_ajax_result;
-- Other Procedure
-- Create an APEX session from PL/SQL
-- p_enable_debug: Yes / No (default)
procedure create_apex_session(
  p_app_id       in apex_applications.application_id%type,
  p_user_name    in apex_workspace_sessions.user_name%type default 'ADMIN',
  p_page_id      in apex_application_pages.page_id%type default null,
  p_session_id   in apex_workspace_sessions.apex_session_id%type default null,
  p_enable_debug in varchar2 default 'No');
-- Get the current APEX Session
function get_apex_session
  return apex_workspace_sessions.apex_session_id%type;
-- Join an APEX Session
procedure join_apex_session(
  p_session_id   in apex_workspace_sessions.apex_session_id%type,
  p_app_id       in apex_applications.application_id%type default null,
  p_page_id      in apex_application_pages.page_id%type default null,
  p_enable_debug in varchar2 default 'No');
-- Drop the current APEX Session
procedure drop_apex_session(
  p_app_id     in apex_applications.application_id%type default null,
  p_session_id in apex_workspace_sessions.apex_session_id%type default null);
end aop_api23_pkg;
/
create or replace package aop_convert23_pkg
AUTHID CURRENT_USER
as
/* Copyright 2015-2023 - APEX RnD - United Codes
*/
-- CONSTANTS
/* AOP Version */
c_aop_version             constant varchar2(6) := '23.1';
c_aop_url                 constant varchar2(50) := 'http://api.apexofficeprint.com/'; -- for https use https://api.apexofficeprint.com/
-- Mime Types
c_mime_type_docx          constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
c_mime_type_xlsx          constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
c_mime_type_pptx          constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
c_mime_type_pdf           constant varchar2(100) := 'application/pdf';
c_mime_type_html          constant varchar2(100) := 'text/html';
c_mime_type_markdown      constant varchar2(100) := 'text/markdown';
c_mime_type_rtf           constant varchar2(100) := 'application/rtf';
c_mime_type_json          constant varchar2(100) := 'application/json';
c_mime_type_text          constant varchar2(100) := 'text/plain';
c_mime_type_zip           constant varchar2(100) := 'application/zip';
c_pdf_pdf                 constant varchar2(3)  := 'pdf'; 
-- Output
c_output_encoding_raw     constant varchar2(3) := 'raw';
c_output_encoding_base64  constant varchar2(6) := 'base64';
/* Init */
c_init_null               constant varchar2(5) := 'null;';
c_source_type_sql         constant varchar2(3) := 'SQL';
-- VARIABLES
-- Logger
g_logger_enabled          boolean := false;       -- set to true to write extra debug output to logger - see https://github.com/OraOpenSource/Logger
-- Call to AOP
g_proxy_override          varchar2(300) := null;  -- null=proxy defined in the application attributes
g_https_host              varchar2(300) := null;  -- parameter for utl_http and apex_web_service
g_transfer_timeout        number(6)     := 1800;  -- default of APEX is 180
g_wallet_path             varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
g_wallet_pwd              varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
g_output_filename         varchar2(100) := null;  -- output
g_language                varchar2(2)   := 'en';  -- Language can be: en, fr, nl, de
g_logging                 clob          := '';    -- ability to add your own logging: e.g. "request_id":"123", "request_app":"APEX", "request_user":"RND"
g_debug                   varchar2(10)  := null;  -- set to 'Local' when only the JSON needs to be generated, 'Remote' for remore debug
g_debug_procedure         varchar2(4000):= null;  -- when debug in APEX is turned on, next to the normal APEX debug, this procedure will be called
   
--
-- Convert one or more files by using a SQL query with following syntax (between [] can be one or more columns)
-- select filename, mime_type, [file_blob, file_base64, url_call_from_db, url_call_from_aop, file_on_aop_server] from my_table
--
function convert_files(
  p_query                 in clob,
  p_output_type           in varchar2 default c_pdf_pdf,
  p_output_encoding       in varchar2 default c_output_encoding_raw,
  p_output_to             in varchar2 default null,
  p_output_filename       in out nocopy varchar2,  
  p_output_converter      in varchar2 default null,
  p_output_collection     in varchar2 default null,
  p_aop_remote_debug      in varchar2 default 'No',
  p_aop_url               in varchar2 default null,
  p_api_key               in varchar2 default null,
  p_aop_mode              in varchar2 default null,
  p_app_id                in number   default null,
  p_page_id               in number   default null,
  p_user_name             in varchar2 default null,
  p_init_code             in clob     default c_init_null,
  p_failover_aop_url      in varchar2 default null,
  p_failover_procedure    in varchar2 default null,
  p_log_procedure         in varchar2 default null,
  p_procedure             in varchar2 default null
) return blob;
--
-- Convert a blob from one format to the other
--
function convert_blob(
  p_blob                  in blob,
  p_mime_type             in varchar2 default null,
  p_output_type           in varchar2 default c_pdf_pdf,
  p_output_filename       in out nocopy varchar2,  
  p_aop_url               in varchar2 default null,
  p_api_key               in varchar2 default null,
  p_aop_mode              in varchar2 default null,
  p_failover_aop_url      in varchar2 default null,
  p_failover_procedure    in varchar2 default null,
  p_log_procedure         in varchar2 default null
) return blob;
-- APEX Plugins
-- Process Type Plugin
/*
function f_process_aop(
  p_process in apex_plugin.t_process,
  p_plugin  in apex_plugin.t_plugin)
  return apex_plugin.t_process_exec_result;
*/
-- Dynamic Action Plugin
function f_render_aop (
  p_dynamic_action in apex_plugin.t_dynamic_action,
  p_plugin         in apex_plugin.t_plugin)
  return apex_plugin.t_dynamic_action_render_result;
function f_ajax_aop(
  p_dynamic_action in apex_plugin.t_dynamic_action,
  p_plugin         in apex_plugin.t_plugin)
  return apex_plugin.t_dynamic_action_ajax_result;
end aop_convert23_pkg;
/
create or replace package aop_plsql23_pkg
AUTHID CURRENT_USER
as
/* Copyright 2015-2023 - APEX RnD - United Codes
*/
/* AOP Version */
c_aop_version  constant varchar2(6)   := '23.1';
--
-- Pre-requisites: apex_web_service package
-- if APEX is not installed, you can use this package as your starting point
-- but you would need to change the apex_web_service calls by utl_http calls or similar
--
--
-- Change following variables for your environment
--
g_aop_url  varchar2(200) := 'http://api.apexofficeprint.com/';                  -- for https use https://api.apexofficeprint.com/
g_api_key  varchar2(200) := '';    -- change to your API key in APEX 18 or above you can use apex_app_setting.get_value('AOP_API_KEY')
g_aop_mode varchar2(15)  := null;  -- AOP Mode can be development or production; when running in development no cloud credits are used but a watermark is printed                                                    
-- Global variables
-- Call to AOP
g_proxy_override          varchar2(300) := null;  -- null=proxy defined in the application attributes
g_transfer_timeout        number(6)     := 180;   -- default is 180
g_wallet_path             varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
g_wallet_pwd              varchar2(300) := null;  -- null=defined in Manage Instance > Instance Settings
-- Output parameters
--### Output
g_output_directory          varchar2(200) := '.';   -- set output directory on AOP Server, if . is specified the files are saved in the default directory: outputfiles
g_output_sign_certificate   varchar2(32000) := null;-- sign PDF with signature which is base64 encoded
g_output_split              varchar2(5)   := null;  -- split file: one file per page: true/false
g_output_merge              varchar2(5)   := null;  -- merge files into one PDF true/false
g_output_icon_font          varchar2(20)  := null;  -- the icon font to use for the output, Font-APEX or Font Awesome 5 (default)
g_output_even_page          varchar2(5)   := null;  -- PDF option to always print even pages (necessary for two-sided pages): true/false
g_output_merge_making_even  varchar2(5)   := null;  -- PDF option to merge making all documents even paged (necessary for two-sided pages): true/false
g_output_page_margin        varchar2(50)  := null;  -- HTML to PDF option: margin in px, can also add top, bottom, left, right
g_output_page_orientation   varchar2(10)  := null;  -- HTML to PDF option: portrait (default) or landscape
g_output_page_width         varchar2(10)  := null;  -- HTML to PDF option: width in px, mm, cm, in. No unit means px.
g_output_page_height        varchar2(10)  := null;  -- HTML to PDF option: height in px, mm, cm, in. No unit means px.
g_output_page_format        varchar2(10)  := null;  -- HTML to PDF option: a4 (default), letter
g_output_remove_last_page   boolean       := false; -- PDF option to remove the last page; e.g. when the last page is empty
--### PDF
g_output_read_password      varchar2(200) := null;  -- protect PDF to read
g_output_modify_password    varchar2(200) := null;  -- protect PDF to write (modify)
g_output_pwd_protection_flag number(4)    := null;  -- optional; default is 4. 
                                                    -- Number when bit calculation is done as specified in http://pdfhummus.com/post/147451287581/hummus-1058-and-pdf-writer-updates-encryption
g_output_correct_page_nr    boolean        := false;-- boolean to check for AOPMergePage text to replace it with the page number.
g_output_lock_form          boolean        := false;-- boolean that determines if the pdf forms should be locked/flattened.
g_identify_form_fields      boolean        := false;-- boolean that fills in the name of the fields of a PDF Form in the field itself so it's easy to identify which field is at what position
g_output_watermark          varchar2(4000) := null; -- Watermark in PDF
g_output_watermark_color    varchar2(500)  := null; -- Watermark option color
g_output_watermark_font     varchar2(500)  := null; -- Watermark option font
g_output_watermark_width    varchar2(500)  := null; -- Watermark option width
g_output_watermark_height   varchar2(500)  := null; -- Watermark option height
g_output_watermark_opacity  varchar2(500)  := null; -- Watermark option opacity
g_output_watermark_rotation varchar2(500)  := null; -- Watermark option rotation
g_output_copies             number         := null; -- Requires output pdf, repeats the output pdf for the given number of times.
--### CSV
g_output_text_delimiter     varchar2(200) := null;  -- 
g_output_field_separator    varchar2(200) := null;  -- 
g_output_character_set      varchar2(200) := null;  -- 
-- Constants
c_mime_type_docx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
c_mime_type_xlsx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
c_mime_type_pptx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
c_mime_type_pdf         constant varchar2(100) := 'application/pdf';
c_mime_type_html        constant varchar2(9)   := 'text/html';
c_mime_type_markdown    constant varchar2(13)  := 'text/markdown';
function make_aop_request(
  p_aop_url            in varchar2 default g_aop_url,
  p_api_key            in varchar2 default g_api_key,
  p_aop_mode           in varchar2 default g_aop_mode,  
  p_json               in clob,
  p_template           in blob,
  p_template_type      in varchar2 default null,
  p_output_encoding    in varchar2 default 'raw', -- change to raw to have binary, change to base64 to have base64 encoded
  p_output_type        in varchar2 default null,
  p_output_filename    in varchar2 default 'output',
  p_aop_remote_debug   in varchar2 default 'No',
  p_output_converter   in varchar2 default '',
  p_prepend_files_json in clob default null,
  p_append_files_json  in clob default null,
  p_templates_json     in clob default null)
  return blob;
end aop_plsql23_pkg;
/
create or replace package aop_plsql_only_pkg
authid current_user
as
/* Copyright 2015-2023 - APEX RnD - United Codes
*/
/* AOP Version */
c_aop_version  constant varchar2(6)   := '23.1';
--
-- PL/SQL only version, not needing Oracle APEX. Requests are being done by UTL_HTTP
--
--
-- Change following variables for your environment
--
g_aop_url  varchar2(200) := 'https://api.apexofficeprint.com/'; -- for http use http://api.apexofficeprint.com/
g_api_key  varchar2(200) := '';    -- change to your API key 
g_aop_mode varchar2(15)  := null;  -- AOP Mode can be development or production; when running in development no cloud credits are used but a watermark is printed                                                    
g_output_converter varchar2(250) := null; 
-- Constants
c_mime_type_docx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
c_mime_type_xlsx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
c_mime_type_pptx        constant varchar2(100) := 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
c_mime_type_pdf         constant varchar2(100) := 'application/pdf';
c_mime_type_html        constant varchar2(9)   := 'text/html';
c_mime_type_markdown    constant varchar2(13)  := 'text/markdown';
-- Helper functions
function replace_with_clob(
   p_source in clob
  ,p_search in varchar2
  ,p_replace in clob
) return clob;
function blob2clobbase64(p_blob in blob)
return clob;
/**
 * @Description: Make a call to the AOP Server and generate the correct JSON with PL/SQL.               
 *
 * @Author: Dimitri Gielis
 * @Created: 29/7/2023
 *
 * @Param: p_aop_url  URL of AOP Server
 * @Param: p_api_key  API Key in case AOP Cloud is used
 * @Param: p_aop_mode  API Key in case AOP Cloud is used
 * @Param: p_data_json  Data in JSON format
 * @Param: p_template  Template in blob format
 * @Param: p_template_type  The type of the template e.g. docx, xlsx, pptx, html, txt, md
 * @Param: p_output_type  The extension of the output e.g. pdf, if no output type is defined, the same extension as the template is used
 * @Param: p_output_filename  Filename of the result
 * @Param: p_aop_debug  Ability to do local (or remote debugging in case the AOP Cloud is used)
 * @Param: p_prepend_files_json Prepend files
 * @Param: p_append_files_json Append Files
 * @Param: p_templates_json Use Sub-templates
 * @Param: p_output_json Configure extra output parameters e.g. output_page_height, output_page_format, output_page_number_start_at, output_remove_last_page
 * @Return: Resulting file where the template and data are merged and outputted in the requested format (output type).
 * @Example: 
-- Generate an AOP Template in Word based on the data I provide
declare
  l_blob blob;
begin
  l_blob := aop_plsql_only_pkg.make_aop_request(
              p_aop_url   => 'https://api.apexofficeprint.com/',
              p_api_key   => '',
              p_data_json => q'!
                                [
                                  {
                                    "filename": "file1",
                                    "data": [
                                        {
                                          "cust_city": "St. Louis",
                                          "cust_first_name": "Albertos",
                                          "cust_last_name": "Lambert",
                                          "orders": [
                                              {
                                                "order_name": "Order 1",
                                                "order_total": 950,
                                                "product": [
                                                    {
                                                        "product_name": "Business \nShirt",
                                                        "quantity": 3,
                                                        "unit_price": 50
                                                    },
                                                    {
                                                        "product_name": "Trousers",
                                                        "quantity": 2,
                                                        "unit_price": 80
                                                    }
                                                ]
                                              }
                                          ]
                                        }
                                    ]
                                  }
                                ]              
              !',
              p_output_type => 'docx'
            );
  insert into aop_output (output_blob, filename, mime_type, last_update_date)
  values (l_blob, 'plsql_only_doc.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', sysdate);          
end;  
-- Generate PDF based on Word template
declare
  l_template blob;
  l_pdf      blob;
begin
  select template_blob
    into l_template
    from aop_template
   where id = 1;
  l_pdf := aop_plsql_only_pkg.make_aop_request(
              p_aop_url   => 'https://api.apexofficeprint.com/',
              p_api_key   => '',
              p_template_type => 'docx',
              p_template  => l_template,
              p_data_json => q'!
                                [
                                  {
                                    "filename": "file1",
                                    "data": [
                                        {
                                          "cust_city": "St. Louis",
                                          "cust_first_name": "Albertos",
                                          "cust_last_name": "Lambert"
                                        }
                                    ]
                                  }
                                ]              
              !',
              p_output_type => 'pdf'
            );
  insert into aop_output (output_blob, filename, mime_type, last_update_date)
  values (l_pdf, 'plsql_only_pdf.pdf', 'application/pdf', sysdate);          
end;  
 *
 */
function make_aop_request(
  p_aop_url            in varchar2 default g_aop_url,
  p_api_key            in varchar2 default g_api_key,
  p_aop_mode           in varchar2 default g_aop_mode,  
  p_data_json          in clob,
  p_template           in blob default null,
  p_template_type      in varchar2 default null,
  p_output_type        in varchar2 default null,
  p_output_filename    in varchar2 default 'output',
  p_aop_debug          in varchar2 default 'No',
  p_prepend_files_json in clob default null,
  p_append_files_json  in clob default null,
  p_templates_json     in clob default null,
  p_output_json        in clob default null)
  return blob;
end aop_plsql_only_pkg;
/
























































































create or replace PROCEDURE       "DELETE_USER" (p_username IN VARCHAR2
                                        , p_action in Varchar2)
IS
user_id  number;
BEGIN
setapexsecuritygroup;
user_id := apex_util.get_user_id(p_username);
if p_action  = 'D' then
  APEX_UTIL.edit_user(
      p_user_id => user_id,
      p_user_name => p_username,
      p_account_locked => 'Y'
  );
  elsif p_action = 'A' then
    
   APEX_UTIL.edit_user(
      p_user_id => user_id,
      p_user_name => p_username,
      p_account_locked => 'N'
  );
  end if;
END DELETE_user;
/
create or replace PROCEDURE  "SETAPEXSECURITYGROUP" is
begin
  begin
for c1 in (
   select application_id,workspace_id
     from apex_applications
    where application_id = 102 )
loop
   apex_util.set_security_group_id(p_security_group_id =>
c1.workspace_id);
end loop;
end;
end setApexSecurityGroup;
/
























































  CREATE OR REPLACE EDITIONABLE SYNONYM ""."AOP_API_PKG" FOR ""."AOP_API23_PKG";

  CREATE OR REPLACE EDITIONABLE SYNONYM ""."AOP_PLSQL_PKG" FOR ""."AOP_PLSQL23_PKG";

  CREATE OR REPLACE EDITIONABLE SYNONYM ""."AOP_CONVERT_PKG" FOR ""."AOP_CONVERT23_PKG";














































































create or replace trigger "CAR_SUPPLIER_T"
before
insert or update or delete on "CAR_SUPPLIER"
for each row
begin
    :new.email_address := lower(:new.email_address);
end;
/
create or replace trigger "CUSTOMER_T"
    before insert or update 
    on CUSTOMER
    for each row
begin
    :new.email_address := lower(:new.email_address);
end CUSTOMER_T;
/
create or replace TRIGGER  "T_BI_USERS" 
  BEFORE INSERT ON TB_USERS
  for each row 
BEGIN 
  :new.user_name := upper(:new.user_name); 
  :new.email := lower(:new.email); 
  :new.password := ENCRYPT_PASSWORD(upper(:new.user_name), :new.password); 
END;
/








  CREATE OR REPLACE FORCE EDITIONABLE VIEW "ACTIVE_CAR_BOOKINGS_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS IN (1,2) 
ORDER BY 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CANCEL_CAR_BOOKINGS_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS IN (1,2,4) 
ORDER BY 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CAR_BOOKINGS_ALMOST_DUE_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS = 4
ORDER BY 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CAR_BOOKINGS_DUE_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS = 5 
ORDER BY 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "COMPLETED_CAR_BOOKINGS_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "PENALTY_AMOUNT", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.PENALTY_AMOUNT, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS = 6
order by 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "EXPIRED_CAR_BOOKINGS_V" ("CAR_BOOKINGS_ID", "BOOKING_DATE", "EXPIRATION_DATE", "AMOUNT_DEPOSITED", "BALANCE_REMAINING", "BOOKING_DAYS_OUTSIDE_ACCRA", "VEHICLE_REGISTRATION_NUMBER", "CAR_USED", "FULLNAME", "IDENTIFICATION_NUMBER", "BOOKING_STATUS_NAME") AS 
  SELECT
    CB.CAR_BOOKINGS_ID,
    CB.BOOKING_START_DATE ||' '|| CB.BOOKING_START_TIME AS BOOKING_DATE,
    CB.BOOKING_END_DATE ||' '|| CB.BOOKING_END_TIME AS EXPIRATION_DATE,
    CB.AMOUNT_DEPOSITED,
    CB.BALANCE_REMAINING, CB.BOOKING_DAYS_OUTSIDE_ACCRA,
    CR.VEHICLE_REGISTRATION_NUMBER,
    CR.YEAR_MANUFACTURED ||' '|| VM.VEHICLE_MAKE ||' '|| VMOD.VEHICLE_MODEL AS CAR_USED,
    C.FIRST_NAME ||' '|| C.LAST_NAME AS FULLNAME,
    C.IDENTIFICATION_NUMBER, BS.BOOKING_STATUS_NAME
FROM
    CAR_BOOKINGS CB
JOIN
    CAR_REGISTRATION CR ON CB.CAR_REGISTRATION_ID = CR.CAR_REGISTRATION_ID
JOIN
    CUSTOMER C ON CB.CUSTOMER_ID = C.CUSTOMER_ID
JOIN
    VEHICLE_MAKE VM ON CR.VEHICLE_MAKE = VM.VEHICLE_MAKE_ID
JOIN
    VEHICLE_MODEL VMOD ON CR.VEHICLE_MODEL = VMOD.VEHICLE_MODEL_ID
JOIN 
    BOOKING_STATUS BS ON CB.BOOKING_STATUS = BS.BOOKING_STATUS_ID
WHERE CB.BOOKING_STATUS = 3
ORDER BY 1;

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "HOMEPAGE_V" ("CARD_INITIALS", "CARD_TITLE", "CARD_ICON", "CARD_TEXT", "CARD_SUBTEXT") AS 
  select '1' "CARD_INITIALS", count(*) "CARD_TITLE",'fa-user' "CARD_ICON",
 'Customers' "CARD_TEXT",
 '' "CARD_SUBTEXT"
from customer 
union
select '2' "CARD_INITIALS",count(*) "CARD_TITLE", 'fa-car' "CARD_ICON",
 'Vehicles' "CARD_TEXT",
 '' "CARD_SUBTEXT"
from car_registration
union
select '3' "CARD_INITIALS",count(*) "CARD_TITLE", 'fa-battery-3' "CARD_ICON",
 'Vehicle Suppliers' "CARD_TEXT",
 '' "CARD_SUBTEXT"
from car_supplier 
union
select '4' "CARD_INITIALS",count(*) "CARD_TITLE", 'fa-car' "CARD_ICON",
 'Available Vehicles' "CARD_TEXT",
 '' "CARD_SUBTEXT"
from car_registration where rental_status = 2  group by 2,3
union
select '5' "CARD_INITIALS",count(*) "CARD_TITLE", 'fa-car' "CARD_ICON",
 'Rented Vehicles' "CARD_TEXT",
 '' "CARD_SUBTEXT"
from car_registration where rental_status = 1  group by 2,3;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CAR_SUPPLIER_T" 
before
insert or update or delete on "CAR_SUPPLIER"
for each row
begin
    :new.email_address := lower(:new.email_address);
end;
/
ALTER TRIGGER "CAR_SUPPLIER_T" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CUSTOMER_T" 
    before insert or update 
    on CUSTOMER
    for each row
begin
    :new.email_address := lower(:new.email_address);
end CUSTOMER_T;
/
ALTER TRIGGER "CUSTOMER_T" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_BI_USERS" 
  BEFORE INSERT ON TB_USERS
  for each row 
BEGIN 
  :new.user_name := upper(:new.user_name); 
  :new.email := lower(:new.email); 
  :new.password := ENCRYPT_PASSWORD(upper(:new.user_name), :new.password); 
END;
/
ALTER TRIGGER "T_BI_USERS" ENABLE;


























































































  CREATE UNIQUE INDEX "BALANCE_PAYMENTS_PK" ON "BALANCE_PAYMENTS" ("BALANCE_PAYMENTS_ID") 
  ;

  CREATE UNIQUE INDEX "BOOKING_STATUS_PK" ON "BOOKING_STATUS" ("BOOKING_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "CAR_BOOKINGS_PK" ON "CAR_BOOKINGS" ("CAR_BOOKINGS_ID") 
  ;

  CREATE UNIQUE INDEX "CAR_REGISTRATION_PK" ON "CAR_REGISTRATION" ("CAR_REGISTRATION_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_IL0000156270C00011$$" ON "CAR_REGISTRATION" (
  ;
  CREATE UNIQUE INDEX "CAR_REGISTRATION_CON" ON "CAR_REGISTRATION" ("VEHICLE_REGISTRATION_NUMBER") 
  ;
  CREATE UNIQUE INDEX "CAR_REGISTRATION_CON1" ON "CAR_REGISTRATION" ("CHASSIS_NUMBER") 
  ;

  CREATE UNIQUE INDEX "CAR_SUPPLIER_PK" ON "CAR_SUPPLIER" ("CAR_SUPPLIER_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_IL0000156233C00008$$" ON "CAR_SUPPLIER" (
  ;
  CREATE UNIQUE INDEX "CAR_SUPPLIER_CON" ON "CAR_SUPPLIER" ("PHONE_NUMBER", "EMAIL_ADDRESS", "IDENTIFICATION_NUMBER") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CAR_SUPPLIER_T" 
before
insert or update or delete on "CAR_SUPPLIER"
for each row
begin
    :new.email_address := lower(:new.email_address);
end;
/
ALTER TRIGGER "CAR_SUPPLIER_T" ENABLE;

  CREATE UNIQUE INDEX "CUSTOMER_PK" ON "CUSTOMER" ("CUSTOMER_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_IL0000156261C00008$$" ON "CUSTOMER" (
  ;
  CREATE UNIQUE INDEX "CUSTOMER_CON" ON "CUSTOMER" ("EMAIL_ADDRESS", "PHONE_NUMBER", "IDENTIFICATION_NUMBER") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CUSTOMER_T" 
    before insert or update 
    on CUSTOMER
    for each row
begin
    :new.email_address := lower(:new.email_address);
end CUSTOMER_T;
/
ALTER TRIGGER "CUSTOMER_T" ENABLE;

  CREATE UNIQUE INDEX "DOCUMENT_STATUS_PK" ON "DOCUMENT_STATUS" ("DOCUMENT_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "DOCUMENT_TYPE_PK" ON "DOCUMENT_TYPE" ("DOCUMENT_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "FUEL_TYPE_PK" ON "FUEL_TYPE" ("FUEL_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "IDENTIFICATION_TYPE_PK" ON "IDENTIFICATION_TYPE" ("IDENTIFICATION_TYPE_ID") 
  ;

  CREATE UNIQUE INDEX "RENTAL_STATUS_PK" ON "RENTAL_STATUS" ("RENTAL_STATUS_ID") 
  ;

  CREATE UNIQUE INDEX "TB_USERS_CON" ON "TB_USERS" ("EMAIL") 
  ;
  CREATE UNIQUE INDEX "SYS_C0052153" ON "TB_USERS" ("USER_ID") 
  ;
  CREATE UNIQUE INDEX "USERS_U1" ON "TB_USERS" ("USER_NAME") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_BI_USERS" 
  BEFORE INSERT ON TB_USERS
  for each row 
BEGIN 
  :new.user_name := upper(:new.user_name); 
  :new.email := lower(:new.email); 
  :new.password := ENCRYPT_PASSWORD(upper(:new.user_name), :new.password); 
END;
/
ALTER TRIGGER "T_BI_USERS" ENABLE;

  CREATE UNIQUE INDEX "USER_MANAGEMENT_PK" ON "USER_MANAGEMENT" ("USER_MANAGEMENT_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_ASSIGNMENTS_PK" ON "VEHICLE_ASSIGNMENTS" ("VEHICLE_ASSIGNMENTS_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_DOCUMENT_PK" ON "VEHICLE_DOCUMENT" ("VEHICLE_DOCUMENT_ID") 
  ;
  CREATE UNIQUE INDEX "VEHICLE_DOCUMENT_CON" ON "VEHICLE_DOCUMENT" ("PHONE_NUMBER") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_MAKE_PK" ON "VEHICLE_MAKE" ("VEHICLE_MAKE_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_MODEL_PK" ON "VEHICLE_MODEL" ("VEHICLE_MODEL_ID") 
  ;

  CREATE UNIQUE INDEX "VEHICLE_TYPE_PK" ON "VEHICLE_TYPE" ("VEHICLE_TYPE_ID") 
  ;




























create or replace package body aop_api23_pkg wrapped 
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
7212e 152ec
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
+S5Ny82Md+xBQa+Ypp38uYrUatAXIPmGD7zNoaE=
/
create or replace package body aop_convert23_pkg wrapped 
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
4685 1477
+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
/
create or replace package body aop_plsql23_pkg as
/**
 * @Description: Package to show how to make a manual call with PL/SQL to the AOP Server
 *               If APEX is not installed, you can use this package as your starting point but you would need to change the apex_web_service calls by utl_http calls or similar.
 *
 * @Author: Dimitri Gielis
 * @Created: 12/12/2015
 */
function replace_with_clob(
   p_source in clob
  ,p_search in varchar2
  ,p_replace in clob
) return clob
as
  l_pos pls_integer;
begin
  l_pos := instr(p_source, p_search);
  if l_pos > 0 then
    return substr(p_source, 1, l_pos-1)
      || p_replace
      || substr(p_source, l_pos+length(p_search));
  end if;
  return p_source;
end replace_with_clob;
/**
 * @Description: Example how to make a manual call to the AOP Server and generate the correct JSON.               
 *
 * @Author: Dimitri Gielis
 * @Created: 9/1/2018
 *
 * @Param: p_aop_url URL of AOP Server
 * @Param: p_api_key API Key in case AOP Cloud is used
 * @Param: p_json Data in JSON format
 * @Param: p_template Template in blob format
 * @Param: p_template_type The type of the template e.g. docx, xlsx, pptx, html, txt, md
 * @Param: p_output_encoding Encoding in raw or base64
 * @Param: p_output_type The extension of the output e.g. pdf, if no output type is defined, the same extension as the template is used
 * @Param: p_output_filename Filename of the result
 * @Param: p_aop_remote_debug Ability to do remote debugging in case the AOP Cloud is used
 * @Param: p_output_converter 
 * @Param: p_prepend_files_json
 * @Param: p_append_files_json
 * @Param: p_templates_json
 * @Return: Resulting file where the template and data are merged and outputted in the requested format (output type).
 */
function make_aop_request(
  p_aop_url            in varchar2 default g_aop_url,
  p_api_key            in varchar2 default g_api_key,
  p_aop_mode           in varchar2 default g_aop_mode,
  p_json               in clob,
  p_template           in blob,
  p_template_type      in varchar2 default null,
  p_output_encoding    in varchar2 default 'raw',  
  p_output_type        in varchar2 default null,
  p_output_filename    in varchar2 default 'output',
  p_aop_remote_debug   in varchar2 default 'No',
  p_output_converter   in varchar2 default '',
  p_prepend_files_json in clob default null,
  p_append_files_json  in clob default null,
  p_templates_json     in clob default null)
  return blob
as
  l_aop_json          clob;
  l_template_clob     clob;
  l_template_type     varchar2(10);
  l_data_json         clob;
  l_output_type       varchar2(10);
  l_blob              blob;
  l_error_description varchar2(32767);
  l_amount                   integer := dbms_lob.lobmaxsize;
  l_dest_offset              integer := 1 ;
  l_src_offset               integer := 1 ;
  l_blob_csid                integer := dbms_lob.default_csid;
  l_lang_context             integer := dbms_lob.default_lang_ctx;
  l_warning                  integer := dbms_lob.warn_inconvertible_char;
begin
  l_template_clob := apex_web_service.blob2clobbase64(p_template);
  l_template_clob := replace(l_template_clob, chr(13) || chr(10), null);
  l_template_clob := replace(l_template_clob, '"', '\u0022');
  if p_template_type is null 
  then
    if dbms_lob.instr(p_template, utl_raw.cast_to_raw('ppt/presentation'))> 0
    then
      l_template_type := 'pptx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('worksheets/'))> 0
    then
      l_template_type := 'xlsx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('word/document'))> 0
    then
      l_template_type := 'docx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('html'))> 0
    then
      l_template_type := 'html';
    else
      l_template_type := 'unknown';
    end if;
  else
      l_template_type := p_template_type;
  end if;
  if p_output_type is null
  then
    l_output_type := l_template_type;
  else
    l_output_type := p_output_type;
  end if;
  l_data_json := p_json;
  l_aop_json := '
  {
      "version": "***AOP_VERSION***",
      "api_key": "***AOP_API_KEY***",
      "mode": "***AOP_MODE***",
      "aop_remote_debug": "***AOP_REMOTE_DEBUG***",
      "template": {
        "file":"***AOP_TEMPLATE_BASE64***",
         "template_type": "***AOP_TEMPLATE_TYPE***"
      },
      "templates": 
        ***AOP_TEMPLATES_JSON***,
      "output": {
        "output_encoding": "***AOP_OUTPUT_ENCODING***",
        "output_type": "***AOP_OUTPUT_TYPE***",
        "output_converter": "***AOP_OUTPUT_CONVERTER***",
        "icon_font": "g_output_icon_font",
        "output_watermark": "g_output_watermark",
        "output_watermark_color": "g_output_watermark_color",
        "output_watermark_font": "g_output_watermark_font",
        "output_watermark_width": "g_output_watermark_width",
        "output_watermark_height": "g_output_watermark_height",
        "output_watermark_opacity": "g_output_watermark_opacity",
        "output_watermark_rotation": "g_output_watermark_rotation",
        "output_modify_password": "g_output_modify_password",  
        "output_read_password": "g_output_read_password",  
        "output_password_protection_flag": "g_output_pwd_protection_flag",  
        "output_correct_page_number": g_output_correct_page_nr,  
        "lock_form": g_output_lock_form,
        "identify_form_fields": g_identify_form_fields,
        "output_even_page": "g_output_even_page",
        "output_merge_making_even": "g_output_merge_making_even",
        "output_split": "g_output_split",
        "output_merge": "g_output_merge",
        "output_sign_certificate": "g_output_sign_certificate",
        "output_copies": "g_output_copies",
        "output_page_margin": "g_output_page_margin",
        "output_page_orientation": "g_output_page_orientation",
        "output_page_width": "g_output_page_width",
        "output_page_height": "g_output_page_height",
        "output_page_format": "g_output_page_format",
        "output_text_delimiter": "g_output_text_delimiter",
        "output_field_separator": "g_output_field_separator",
        "output_character_set": "g_output_character_set",
        "output_remove_last_page": "g_output_remove_last_page"
      },
      "files":
        ***AOP_DATA_JSON***,
      "prepend_files":
        ***AOP_PREPEND_FILES_JSON***,
      "append_files":
        ***AOP_APPEND_FILES_JSON***  
  }';
  l_aop_json := replace(l_aop_json, '***AOP_VERSION***', c_aop_version);
  l_aop_json := replace(l_aop_json, '***AOP_API_KEY***', p_api_key);
  l_aop_json := replace(l_aop_json, '***AOP_MODE***', p_aop_mode);
  l_aop_json := replace(l_aop_json, '***AOP_REMOTE_DEBUG***', p_aop_remote_debug);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATE_BASE64***', l_template_clob);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATE_TYPE***', l_template_type);
  l_aop_json := replace(l_aop_json, '***AOP_OUTPUT_ENCODING***', p_output_encoding);
  l_aop_json := replace(l_aop_json, '***AOP_OUTPUT_TYPE***', l_output_type);
  l_aop_json := replace(l_aop_json, '***AOP_OUTPUT_CONVERTER***', p_output_converter);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_DATA_JSON***', l_data_json);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_PREPEND_FILES_JSON***', nvl(p_prepend_files_json,'[]'));
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_APPEND_FILES_JSON***', nvl(p_append_files_json,'[]'));
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATES_JSON***', nvl(p_templates_json,'[]'));
  l_aop_json := replace(l_aop_json, 'g_output_icon_font', g_output_icon_font);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_color', g_output_watermark_color);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_font', g_output_watermark_font);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_width', g_output_watermark_width);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_height', g_output_watermark_height);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_opacity', g_output_watermark_opacity);
  l_aop_json := replace(l_aop_json, 'g_output_watermark_rotation', g_output_watermark_rotation);
  l_aop_json := replace(l_aop_json, 'g_output_watermark', g_output_watermark);
  l_aop_json := replace(l_aop_json, 'g_output_modify_password', g_output_modify_password);
  l_aop_json := replace(l_aop_json, 'g_output_read_password', g_output_read_password);
  l_aop_json := replace(l_aop_json, 'g_output_pwd_protection_flag', to_char(g_output_pwd_protection_flag));
  l_aop_json := replace(l_aop_json, 'g_output_correct_page_nr', case when g_output_correct_page_nr then 'true' else 'false' end);
  l_aop_json := replace(l_aop_json, 'g_output_lock_form', case when g_output_lock_form then 'true' else 'false' end);
  l_aop_json := replace(l_aop_json, 'g_identify_form_fields', case when g_identify_form_fields then 'true' else 'false' end);
  l_aop_json := replace(l_aop_json, 'g_output_even_page', g_output_even_page);
  l_aop_json := replace(l_aop_json, 'g_output_merge_making_even', g_output_merge_making_even);
  l_aop_json := replace(l_aop_json, 'g_output_split', g_output_split);
  l_aop_json := replace(l_aop_json, 'g_output_merge', g_output_merge);
  l_aop_json := replace(l_aop_json, 'g_output_sign_certificate', g_output_sign_certificate);
  l_aop_json := replace(l_aop_json, 'g_output_copies', to_char(g_output_copies));
  l_aop_json := replace(l_aop_json, 'g_output_page_margin', g_output_page_margin);
  l_aop_json := replace(l_aop_json, 'g_output_page_orientation', g_output_page_orientation);
  l_aop_json := replace(l_aop_json, 'g_output_page_width', g_output_page_width);
  l_aop_json := replace(l_aop_json, 'g_output_page_height', g_output_page_height);
  l_aop_json := replace(l_aop_json, 'g_output_page_format', g_output_page_format);
  l_aop_json := replace(l_aop_json, 'g_output_text_delimiter', g_output_text_delimiter);
  l_aop_json := replace(l_aop_json, 'g_output_field_separator', g_output_field_separator);
  l_aop_json := replace(l_aop_json, 'g_output_character_set', g_output_character_set);
  l_aop_json := replace(l_aop_json, 'g_output_remove_last_page', case when g_output_remove_last_page then 'true' else 'false' end);
  l_aop_json := replace(l_aop_json, '\\n', '\n');
  --logger.log(p_text  => 'AOP JSON: ' || p_message, p_scope => 'AOP', p_extra => l_aop_json);
  if p_aop_remote_debug = 'Local'
  then 
    dbms_lob.createtemporary(l_blob, false);
    dbms_lob.converttoblob (
        dest_lob    => l_blob,
        src_clob    => l_aop_json,
        amount      => l_amount,
        dest_offset => l_dest_offset,
        src_offset  => l_src_offset,
        blob_csid   => l_blob_csid,
        lang_context=> l_lang_context,
        warning     => l_warning
    );
  else
    apex_web_service.g_request_headers.delete;
    apex_web_service.g_request_headers(1).name := 'Content-Type';
    apex_web_service.g_request_headers(1).value := 'application/json';
    begin
      l_blob := apex_web_service.make_rest_request_b(
        p_url              => p_aop_url,
        p_http_method      => 'POST',
        p_body             => l_aop_json,
        p_proxy_override   => g_proxy_override,
        p_transfer_timeout => g_transfer_timeout,
        p_wallet_path      => g_wallet_path,
        p_wallet_pwd       => g_wallet_pwd);
    exception
    when others
    then
      raise_application_error(-20001,'Issue calling AOP Service (REST call: ' || apex_web_service.g_status_code || '): ' || CHR(10) || SQLERRM);
    end;
    -- read header variable and create error message
    -- HTTP Status Codes:
    --  200 is normal
    --  500 error received
    --  503 Service Temporarily Unavailable, the AOP server is probably not running
    if apex_web_service.g_status_code = 200
    then
      l_error_description := null;
    elsif apex_web_service.g_status_code = 503
    then
      l_error_description := 'AOP Server not running.';
    elsif apex_web_service.g_status_code = 500
    then
      for l_loop in 1.. apex_web_service.g_headers.count loop
        if apex_web_service.g_headers(l_loop).name = 'error_description'
        then
          l_error_description := apex_web_service.g_headers(l_loop).value;
          -- errors returned by AOP server are base64 encoded
          l_error_description := utl_encode.text_decode(l_error_description, 'AL32UTF8', UTL_ENCODE.BASE64);
        end if;
      end loop;
    else
      l_error_description := 'Unknown error. Check AOP server logs.';
    end if;
    -- YOU CAN STORE THE L_BLOB TO A LOCAL DEBUG TABLE AS AOP SERVER RETURNS A DOCUMENT WITH MORE INFORMATION
    --
    -- check if succesfull
    if apex_web_service.g_status_code <> 200
    then
      raise_application_error(-20002,'Issue returned by AOP Service (REST call: ' || apex_web_service.g_status_code || '): ' || CHR(10) || l_error_description);
    end if;
  end if;
  -- return print
  return l_blob;
end make_aop_request;
end aop_plsql23_pkg;
/
create or replace package body aop_plsql_only_pkg as
/**
 * @Description: Package to show how to make a manual call with PL/SQL to the AOP Server
 *               If APEX is not installed, you can use this package as your starting point but you would need to change the apex_web_service calls by utl_http calls or similar.
 *
 * @Author: Dimitri Gielis
 * @Created: 12/12/2015
 */
function replace_with_clob(
   p_source in clob
  ,p_search in varchar2
  ,p_replace in clob
) return clob
as
  l_pos pls_integer;
begin
  l_pos := instr(p_source, p_search);
  if l_pos > 0 then
    return substr(p_source, 1, l_pos-1)
      || p_replace
      || substr(p_source, l_pos+length(p_search));
  end if;
  return p_source;
end replace_with_clob;
function blob2clobbase64(p_blob in blob)
return clob
as
  l_step   pls_integer := 12000;
  l_base64 clob;
begin
  for i in 0 .. trunc((dbms_lob.getlength(p_blob) - 1 )/l_step) loop
    l_base64 := l_base64 || sys.utl_raw.cast_to_varchar2(sys.utl_encode.base64_encode(dbms_lob.substr(p_blob, l_step, i * l_step + 1)));
  end loop;  
  return l_base64;
end blob2clobbase64;
--
function make_aop_request(
  p_aop_url            in varchar2 default g_aop_url,
  p_api_key            in varchar2 default g_api_key,
  p_aop_mode           in varchar2 default g_aop_mode,  
  p_data_json          in clob,
  p_template           in blob default null,
  p_template_type      in varchar2 default null,
  p_output_type        in varchar2 default null,
  p_output_filename    in varchar2 default 'output',
  p_aop_debug          in varchar2 default 'No',
  p_prepend_files_json in clob default null,
  p_append_files_json  in clob default null,
  p_templates_json     in clob default null,
  p_output_json        in clob default null)
  return blob
as
  l_aop_json          clob;
  l_template_clob     clob;
  l_template_type     varchar2(10);
  l_output_type       varchar2(10);
  l_blob              blob;
  l_error_description varchar2(32767);
  l_max_amount        integer := dbms_lob.lobmaxsize;
  l_amount            binary_integer := 8000; 
  l_dest_offset       integer := 1 ;
  l_src_offset        integer := 1 ;
  l_blob_csid         integer := dbms_lob.default_csid;
  l_lang_context      integer := dbms_lob.default_lang_ctx;
  l_warning           integer := dbms_lob.warn_inconvertible_char;
  l_req               utl_http.req;
  l_res               utl_http.resp;
  l_buffer            varchar2(32767); 
  l_raw_buf           raw(32767);
  l_step              pls_integer := 12000;
  l_head_name         varchar2(4000);
  l_head_value        varchar2(32767);
  l_output_json       clob;
begin
  if p_template is not null
  then
    l_template_clob := blob2clobbase64(p_template);
    l_template_clob := replace(l_template_clob, chr(13) || chr(10), null);
    l_template_clob := replace(l_template_clob, '"', '\u0022');
  end if;
  if p_template_type is not null
  then
    l_template_type := p_template_type;
  elsif p_template_type is null and p_template is not null
  then
    if dbms_lob.instr(p_template, utl_raw.cast_to_raw('ppt/presentation'))> 0
    then
      l_template_type := 'pptx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('worksheets/'))> 0
    then
      l_template_type := 'xlsx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('word/document'))> 0
    then
      l_template_type := 'docx';
    elsif dbms_lob.instr(p_template, utl_raw.cast_to_raw('html'))> 0
    then
      l_template_type := 'html';
    else
      l_template_type := 'txt';
    end if;
  else
    -- use AOP Template 
    l_template_type := '';
  end if;
  if p_output_type is null
  then
    l_output_type := l_template_type;
  else
    l_output_type := p_output_type;
  end if;
  if p_output_json is null
  then
    l_output_json := ' "output_converter": "' || g_output_converter || '" ';
  else
    l_output_json := ' "output_converter": "' || g_output_converter || '", ' || p_output_json;
  end if;
  l_aop_json := '
  {
      "version": "***AOP_VERSION***",
      "api_key": "***AOP_API_KEY***",
      "mode": "***AOP_MODE***",
      "template": {
        "file":"***AOP_TEMPLATE_BASE64***",
         "template_type": "***AOP_TEMPLATE_TYPE***"
      },
      "templates": 
        ***AOP_TEMPLATES_JSON***,
      "output": {
        "output_encoding": "raw",
        "output_type": "***AOP_OUTPUT_TYPE***",
        ***AOP_OUTPUT_JSON***        
      },
      "files":
        ***AOP_DATA_JSON***,
      "prepend_files":
        ***AOP_PREPEND_FILES_JSON***,
      "append_files":
        ***AOP_APPEND_FILES_JSON***  
  }';
  l_aop_json := replace(l_aop_json, '***AOP_VERSION***', c_aop_version);
  l_aop_json := replace(l_aop_json, '***AOP_API_KEY***', p_api_key);
  l_aop_json := replace(l_aop_json, '***AOP_MODE***', p_aop_mode);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATE_BASE64***', l_template_clob);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATE_TYPE***', l_template_type);
  l_aop_json := replace(l_aop_json, '***AOP_OUTPUT_TYPE***', l_output_type);
  l_aop_json := replace(l_aop_json, '***AOP_OUTPUT_JSON***', l_output_json);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_DATA_JSON***', p_data_json);
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_PREPEND_FILES_JSON***', nvl(p_prepend_files_json,'[]'));
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_APPEND_FILES_JSON***', nvl(p_append_files_json,'[]'));
  l_aop_json := replace_with_clob(l_aop_json, '***AOP_TEMPLATES_JSON***', nvl(p_templates_json,'[]'));
  l_aop_json := replace(l_aop_json, '\\n', '\n');
  if p_aop_debug = 'Local'
  then 
    dbms_lob.createtemporary(l_blob, false);
    dbms_lob.converttoblob (
        dest_lob    => l_blob,
        src_clob    => l_aop_json,
        amount      => l_max_amount,
        dest_offset => l_dest_offset,
        src_offset  => l_src_offset,
        blob_csid   => l_blob_csid,
        lang_context=> l_lang_context,
        warning     => l_warning
    );
  else
    -- Call AOP
    l_req := sys.utl_http.begin_request(p_aop_url, 'POST', 'HTTP/1.1');
    sys.utl_http.set_header(l_req, 'Content-Type', 'application/json'); 
    sys.utl_http.set_header(l_req, 'Content-Length', length(l_aop_json));  
  
    if length(l_aop_json) <= 32767 
    then
      sys.utl_http.write_text(l_req, l_aop_json);   
    else
      sys.utl_http.set_header(l_req, 'Transfer-Encoding', 'chunked');
    
      while (l_dest_offset < length(l_aop_json))
      loop
        sys.dbms_lob.read (l_aop_json, l_amount, l_dest_offset, l_buffer);
        sys.utl_http.write_text (l_req, l_buffer);
        l_dest_offset := l_dest_offset + l_amount;     
      end loop;
    end if;
    l_res := sys.utl_http.get_response(l_req);
    -- code and header
    if l_res.status_code = utl_http.http_ok
    then
      l_error_description := null;
    elsif l_res.status_code = 503
    then
      l_error_description := 'AOP Server not running or can not be reached.';
    elsif l_res.status_code = 500
    then
      for i in 1 .. sys.utl_http.get_header_count(l_res) loop
        sys.utl_http.get_header(l_res, i, l_head_name, l_head_value);
        if l_head_name = 'error_description'
        then
          l_error_description := l_head_value;
          -- errors returned by AOP server are base64 encoded
          l_error_description := utl_encode.text_decode(l_error_description, 'AL32UTF8', utl_encode.base64);
        end if;  
      end loop;
    else
      l_error_description := 'Unknown error. Check AOP server logs.';
    end if;
    if l_error_description is not null
    then
      raise_application_error(-20002, 'Issue returned by AOP Service (REST call: ' || l_res.status_code || '): ' || CHR(10) || l_error_description);
    else
      -- body
      sys.dbms_lob.createtemporary (lob_loc => l_blob, cache => true );
      begin
        loop
          sys.utl_http.read_raw(l_res, l_raw_buf);        
          sys.dbms_lob.writeappend( l_blob, sys.utl_raw.length(l_raw_buf), l_raw_buf );
        end loop;
      exception
      when others 
      then
        null; -- end reading output
      end;    
      sys.utl_http.end_response(l_res);
    end if;
  end if;
  -- return print
  return l_blob;
end make_aop_request;
end aop_plsql_only_pkg;
/















































































































































